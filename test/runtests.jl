using AirfoilPrep
using Base.Test
using Xfoil

using CSV
using PyPlot
using JLD
fileLoc,_ = splitdir(@__FILE__)


# Specify plotting options
rc("figure", figsize=(4.5, 2.6))
rc("font", size=10.0)
rc("lines", linewidth=1.5)
rc("lines", markersize=3.0)
rc("legend", frameon=false)
rc("axes.spines", right=false, top=false)
rc("figure.subplot", left=0.18, bottom=0.18, top=0.97, right=0.92)
rc("axes", color_cycle=["348ABD", "A60628", "009E73", "7A68A6", "D55E00", "CC79A7"])
color_cycle=["#348ABD", "#A60628", "#009E73", "#7A68A6", "#D55E00", "#CC79A7", "#000486","#700000","#006907","#4C0099"]

PyPlot.close("all")

modulepath,_ = splitdir(@__FILE__)
modulepath = modulepath*"/"

AP = AirfoilPrep

data_path = "data/"

#-------- TEST AIRFOILPREPY WRAPPER --------#
"Verify that 3D corrections (stall delay) to 2D airfoil
properties is done correctly. The stall delay is implemented in `airfoilprep.py`
as explained in Du, Z., & Selig, M. (1998), *A 3-D stall-delay model for
horizontal axis wind turbine performance prediction*, and is verified by
replicating the results Du reports in Fig. 5 over the FFA airfoil in 5WPX."
function verify_correction3D_2()
    Re = Int(0.5*10^5) # Reynolds number
    Vinf = 8.8     # (m/s) Wind speed
    RPM = 158
    D = 5.35        # (m) Rotor diameter
    TSR = (2*pi*RPM/60)*(D/2) / (Vinf)

    fig1 = figure("correction3D")
    title("FFA 5WPX airfoil lift coefficient")
    xlabel(L"Angle of attack $\alpha (^\circ)$")
    ylabel(L"$C_l$")
    grid(true, color="0.8", linestyle="--")

    # 2D curve
    data = CSV.read(modulepath*data_path*"FFA-2Dcalc.csv";
    header=["angle", "Cl"], datarow=1)
    plot(data[:,1], data[:,2], "-k", label="2D calculated")

    polar = AP.Polar(Re, data[:,1], data[:,2],
    zeros(data[:,1]), zeros(data[:,1]),
    Float64[], Float64[])

    # Hard code old solutions for error checking
    old_cl_cr_16 = [0.0299769, 0.0473358, 0.0641102, 0.0826366, 0.0996613, 0.116936, 0.132459, 0.149484, 0.166759, 0.183533, 0.199056, 0.216706, 0.23443, 0.2518, 0.266208, 0.283751, 0.304505, 0.328773, 0.350701, 0.369912, 0.390744, 0.411294, 0.429392, 0.447877, 0.465695, 0.485271, 0.500772, 0.517415, 0.542212, 0.565233, 0.583722, 0.599897, 0.619426, 0.634199, 0.653888, 0.673884, 0.695413, 0.716739, 0.744017, 0.772024, 0.798671, 0.823187, 0.847241, 0.873737, 0.886028, 0.884262, 0.878168, 0.873115, 0.866446, 0.860485, 0.848607, 0.838469, 0.826784, 0.815457, 0.804488, 0.794233, 0.783979, 0.772321, 0.760691, 0.750102, 0.759824, 0.773619, 0.785396]

    old_cl_cr_37 = [0.0337801, 0.0513294, 0.0677512, 0.0849978, 0.101537, 0.118195, 0.134027, 0.150567, 0.167224, 0.183646, 0.199479, 0.21546, 0.23513, 0.251588, 0.262161, 0.281975, 0.30213, 0.326092, 0.346911, 0.366866, 0.386748, 0.406807, 0.425557, 0.443637, 0.461402, 0.484257, 0.501784, 0.514734, 0.538474, 0.56623, 0.585163, 0.603007, 0.623283, 0.64132, 0.662523, 0.683871, 0.713161, 0.74411, 0.802981, 0.866457, 0.922474, 0.969816, 1.01609, 1.08993, 1.17158, 1.21422, 1.23692, 1.26182, 1.2851, 1.30616, 1.31761, 1.32563, 1.33206, 1.33866, 1.34542, 1.35253, 1.35963, 1.36693, 1.37509, 1.39523, 1.45718, 1.54739, 1.62453]
    old_cl = (old_cl_cr_16,old_cl_cr_37)

    correction3D_error_max = 0.0

    # 3D curves
    i = 1
    for (mrkr, style, c_over_r, r_over_R) in [
        ("^r","--r",16,55),("Pg","-.g",37,30)]
        data = CSV.read(modulepath*data_path*"FFA-3D0$c_over_r.csv";
        header=["angle", "Cl"], datarow=1)
        plot(data[:,1], data[:,2], mrkr,
        label="3D wind tunnel c/r=0.$c_over_r")

        newpolar = AP.correction3D(polar, r_over_R/100, c_over_r/100, TSR,
        alpha_linear_min=0, alpha_linear_max=7,
        alpha_max_corr=30)

        plot(AP.get_cl(newpolar)[1], AP.get_cl(newpolar)[2], style,
        label="3D-airfoilprep.py corrected c/r=0.$c_over_r")
        correction3D_error_max = max(correction3D_error_max,maximum(abs.(AP.get_cl(newpolar)[2]-old_cl[i])))
        i+=1
    end
    legend(loc="best")

    return correction3D_error_max
end


"Tests (but only verifies, since there is nothing to compare to) that the
extrapolation method from `airfoilprep.py` is being called correctly. This
method takes airfoil curves an extrapolates them all around 360 degrees.
NOTE: CDmax in that function is the drag coeff at alpha=90deg or
CDmax=1.11+0.18AR for a blade of aspect ratio AR<50."
function test_extrapolation(; alphas=[i for i in -10:1.0:20], iter=100,
    verbose=true)
    Re=1*10^5
    CDmax = 1.3

    Vinf = 10     # (m/s) Wind speed
    RPM = 72
    D = 10        # (m) Rotor diameter
    TSR = (2*pi*RPM/60)*(D/2) / (Vinf)
    r_over_R = 30
    c_over_r = 18

    data = CSV.read(modulepath*data_path*"FFA-2Dcalc.csv";
    header=["angle", "Cl"], datarow=1)

    polar = AP.Polar(Re, data[:,1], data[:,2],
    zeros(data[:,1]), zeros(data[:,1]),
    Float64[], Float64[])

    newpolar = AP.correction3D(polar, r_over_R/100, c_over_r/100, TSR,
    alpha_linear_min=0, alpha_linear_max=7,
    alpha_max_corr=30)

    # Extrapolated polar
    # extrap_polar1 = AP.extrapolate(newpolar, CDmax)
    extrap_polar = AP.extrapolate(polar, CDmax)

    # AP.plot(extrap_polar1; cdpolar=false)
    AP.plot(extrap_polar; cdpolar=false)

    return extrap_polar
end


"""#-------- TEST NDtools Automated Table Generation from Input Function --------#

#Use S809 NREL airfoil:
#1) Verify Cl, Cd, Cm with data from airfoiltool.com
"""
function validateNDtools_from_Xfoil()

    #--- Load in Airfoiltools.com S809 Data ---#
    S809_Re2E5 = CSV.read(modulepath*data_path*"xf-s809-nr-200000.csv";
    header=["alpha" ,"CL","CD","CDp","CM","Top_Xtr","Bot_Xtr"],delim = ",", datarow=13)

    S809_Re5E5 = CSV.read(modulepath*data_path*"xf-s809-nr-500000.csv";
    header=["alpha" ,"CL","CD","CDp","CM","Top_Xtr","Bot_Xtr"],delim = ",", datarow=13)

    S809_Re1E6 = CSV.read(modulepath*data_path*"xf-s809-nr-1000000.csv";
    header=["alpha" ,"CL","CD","CDp","CM","Top_Xtr","Bot_Xtr"],delim = ",", datarow=13)

    AirfoilToolsData = (S809_Re2E5,S809_Re5E5,S809_Re1E6)

    #Load in airfoil x and y points
    folder,_ = splitdir(@__FILE__)
    airfoil_file = joinpath(folder,"data","S809.txt")
    headerlines = 2
    open(airfoil_file,"r") do f
        global  x = Array{Float64,1}(0)
        global  y = Array{Float64,1}(0)
        for (i,line) in enumerate(eachline(f))
            if i>headerlines
                x = append!(x,parse(split(chomp(line))[1]))
                y = append!(y,parse(split(chomp(line))[2]))
            else
            end
        end
    end

    # Define operating conditions
    aoas = collect(linspace(-15,25,41))#linspace(-10,10,20)
    Res = [2E5,3E5,4E5,5E5,6E5,7E5,8E5,9E5,1E6]
    Ms = [0.0,0.01]

    #Wapper function for my analysis code: Xfoil for this test
    println("Running Xfoil as Airfoil Data generator")
    function f(Re,M)
        # Note that aoas is inherited for more efficient xfoil operation
        cls,cds,cdps,cms,convs =Xfoil.xfoilsweep(x,y,aoas,Re;iter=100,npan=140,mach=M,
        percussive_maintenance=true,printdata=true,zeroinit=true,clmaxstop=true,clminstop=true)

        return cls,cds+cdps,cms,convs
    end


    var_input = (aoas,Res,Ms)
    var_names = ["aoa","Re","M"]
    response_names = ["cl","cd","cm","convs"]

    #Since the version of Xfoil being used is more efficient if it handles the aoa sweep, we'll not generate a table with it yet.
    response_values = AirfoilPrep.genNDarray(f,response_names,var_input[2:end],var_names[2:end])
    JLD.save("$(fileLoc)/data/response_values.jld", "response_values", response_values)
    # response_values = JLD.load("$(fileLoc)/data/response_values.jld")
    # response_values = response_values["response_values"]

    # Reformat to get the ND array in the right format for my specific problem, ie
    # a table of responses lining up to aoa, re, mach
    cls = zeros(length(aoas),length(Res),length(Ms))
    cds = zeros(cls)
    cms = zeros(cls)
    convs = zeros(cls)

    for i = 1:length(aoas)
        for j = 1:length(Res)
            for k = 1:length(Ms)
                cls[i,j,k] = response_values[j,k][1][i]
                cds[i,j,k] = response_values[j,k][2][i]
                cms[i,j,k] = response_values[j,k][3][i]
                convs[i,j,k] = response_values[j,k][4][i]
            end
        end
    end

    #Put the response values into the format required by NDtools
    response_values2 = [cls,cds,cms,convs]
    NDtable = AirfoilPrep.TableND(response_values2,response_names,var_input,var_names)

    #Access the table example
    myindices = [1,1,1]
    cl = NDtable.response_values[1][myindices...] #Assumed cl to be first response

    # Spline the table
    #Warning, the airfoil data here has non-converged points and if they include Nans or INF, the spline will be corrupted
    splout_non_extrap = AirfoilPrep.SplineND_from_tableND(NDtable)

    #Plot the results
    Re_airfoiltools = [2E5,5E5,1E6]
    Re_xfoil_idx = [1,4,9]
    aoas21 = []
    aoas2 = []
    XfoilData_cl1 =[]
    XfoilData_cl =[]
    XfoilData_cd1 =[]
    XfoilData_cd =[]
    XfoilData_cm1 =[]
    XfoilData_cm =[]
    vars = []

    for i = 1:length(Re_airfoiltools) #length of the airfoiltools data
        for j = 1:length(aoas)
            if NDtable.response_values[4][j,i,1]==true
                vars = [aoas[j],Re_airfoiltools[i],0.0]
                #Corrupted spline because of Inf in points, use direct response values
                push!(XfoilData_cl1,NDtable.response_values[1][j,Re_xfoil_idx[i],1])#push!(XfoilData_cl1,AirfoilPrep.interpND(splout_non_extrap[1],vars))
                push!(XfoilData_cd1,NDtable.response_values[2][j,Re_xfoil_idx[i],1])#push!(XfoilData_cd1,AirfoilPrep.interpND(splout_non_extrap[2],vars))
                push!(XfoilData_cm1,NDtable.response_values[3][j,Re_xfoil_idx[i],1])#push!(XfoilData_cm1,AirfoilPrep.interpND(splout_non_extrap[3],vars))
                push!(aoas21,aoas[j])
            end
        end

        push!(XfoilData_cl,XfoilData_cl1)
        push!(XfoilData_cd,XfoilData_cd1)
        push!(XfoilData_cm,XfoilData_cm1)
        push!(aoas2,aoas21)
        XfoilData_cl1 =[]
        XfoilData_cd1 =[]
        XfoilData_cm1 =[]
        aoas21 = []
    end

    # Check the cl error from an original run
    NDSpl_maxerror_cl = 0.0
    OldXfoilData_s809_Re2E5 = [-0.473515, -0.648893, -0.528673, -0.492563, -0.357591, -0.209986, -0.110082, -0.0481071, 0.00891502, 0.113733, 0.17017, 0.235873, 0.327773, 0.41861, 0.527213, 0.633993, 0.746845, 0.87758, 0.977806, 0.954624, 0.926883]
    OldXfoilData_s809_Re5E5 = [-0.746883, -0.650123, -0.584852, -0.551076, -0.524587, -0.512261, -0.439827, -0.318644, -0.202955, -0.0871805, 0.0295255, 0.146385, 0.263179, 0.37841, 0.492835, 0.60978, 0.726073, 0.837511, 0.943375, 0.960604, 0.983048, 1.01456, 1.03991, 1.0668, 1.09374, 1.1144, 1.14403, 1.15379, 1.1609, 1.1431]
    OldXfoilData_s809_Re1E6 = [-0.809019, -0.867028, -0.75136, -0.688495, -0.653602, -0.622135, -0.57855, -0.519902, -0.448765, -0.327558, -0.208416, -0.0891631, 0.0295293, 0.148423, 0.267439, 0.386354, 0.50429, 0.621041, 0.736629, 0.851222, 0.914147, 0.97305, 1.02751, 1.07725, 1.12474, 1.17066, 1.20861, 1.23612, 1.2648, 1.29016, 1.29755, 1.31023]
    XfoilData_cl_old = (OldXfoilData_s809_Re2E5,OldXfoilData_s809_Re5E5,OldXfoilData_s809_Re1E6)

    NDSpl_maxerror_cd = 0.0
    Xfoil_cd_old_2E5 = [0.15251, 0.0622333, 0.0686069, 0.06014, 0.100844, 0.108144, 0.101768, 0.0943553, 0.0879524, 0.0834842, 0.0600548, 0.051901, 0.0521719, 0.0502692, 0.0501376, 0.0487363, 0.0441949, 0.0360625, 0.0285292, 0.0320092, 0.0485597]
    Xfoil_cd_old_5E5 = [0.173309, 0.0654769, 0.0615699, 0.0519822, 0.0404028, 0.0244429, 0.0181499, 0.0217155, 0.0206846, 0.0198172, 0.0198481, 0.0199731, 0.0201065, 0.0204247, 0.0208011, 0.0203382, 0.0186523, 0.0164196, 0.0140924, 0.0200996, 0.0269638, 0.0367127, 0.0482435, 0.0593937, 0.0709354, 0.0845088, 0.0982058, 0.116762, 0.138359, 0.168361]
    Xfoil_cd_old_1E6 = [0.150439, 0.112753, 0.0674232, 0.0618973, 0.052744, 0.0418405, 0.0318201, 0.0215296, 0.00964882, 0.0118767, 0.0118197, 0.0117866, 0.0116456, 0.011748, 0.0119901, 0.0121527, 0.0124006, 0.011345, 0.0105963, 0.00977793, 0.0139917, 0.0180614, 0.0220341, 0.0281537, 0.0365331, 0.045208, 0.054797, 0.0660075, 0.0779478, 0.0915751, 0.109754, 0.128328]
    XfoilData_cd_old = (Xfoil_cd_old_2E5,Xfoil_cd_old_5E5,Xfoil_cd_old_1E6)

    NDSpl_maxerror_cm = 0.0
    Xfoil_cm_old_2E5 = [-0.0531119, -0.0380655, -0.0304781, -0.0277283, -0.0161606, -0.0158703, -0.0182155, -0.0192237, -0.0197291, -0.0224647, -0.0268114, -0.0331048, -0.0337455, -0.0384099, -0.0386892, -0.0400551, -0.0411134, -0.0418757, -0.039125, -0.0217998, -0.0158545]
    Xfoil_cm_old_5E5 = [-0.0333839, -0.0260745, -0.0236179, -0.02154, -0.0204999, -0.0225656, -0.0292425, -0.0310045, -0.0339394, -0.0367941, -0.0393168, -0.0419707, -0.0446739, -0.0471477, -0.0492277, -0.0512713, -0.0527747, -0.0533284, -0.0526812, -0.0397054, -0.0306905, -0.0274788, -0.0246275, -0.0219109, -0.0195295, -0.0178726, -0.0178988, -0.0181141, -0.0201363, -0.0239134]
    Xfoil_cm_old_1E6 = [-0.033515, -0.037818, -0.0223279, -0.0210895, -0.0188183, -0.0178605, -0.0182186, -0.0223099, -0.0295553, -0.0321853, -0.0349487, -0.0377451, -0.0404905, -0.0431673, -0.0458499, -0.0484486, -0.0508638, -0.0527459, -0.0543582, -0.0557457, -0.0494517, -0.0430175, -0.0367772, -0.0326887, -0.0308393, -0.029174, -0.0271752, -0.0249823, -0.0235408, -0.0230162, -0.0229448, -0.024175]
    XfoilData_cm_old = (Xfoil_cm_old_2E5,Xfoil_cm_old_5E5,Xfoil_cm_old_1E6)

    #Plot the AirfoilTools Data vs the newly generated data and calculate the error
    PyPlot.figure("Verify_NDspline_cl")
    for i = 1:length(Re_airfoiltools)
        PyPlot.plot(aoas2[i],XfoilData_cl[i],"-",color = color_cycle[i],label = "NDtools Re $(round(Int,Re_airfoiltools[i]))")
        PyPlot.plot(AirfoilToolsData[i][:,1],AirfoilToolsData[i][:,2],"--",color = color_cycle[i],label = "Aifoiltools.com Re $(round(Int,Re_airfoiltools[i]))")
        NDSpl_maxerror_cl = max(NDSpl_maxerror_cl,maximum(abs.(XfoilData_cl[i]-XfoilData_cl_old[i])))
    end
    PyPlot.xlabel("AOA")
    PyPlot.ylabel("cl")
    PyPlot.legend(loc = "best")

    #Plot the AirfoilTools Data vs the newly generated data and calculate the error
    PyPlot.figure("Verify_NDspline_cd")
    for i = 1:length(Re_airfoiltools)
        PyPlot.plot(aoas2[i],XfoilData_cd[i],"-",color = color_cycle[i],label = "NDtools Re $(round(Int,Re_airfoiltools[i]))")
        PyPlot.plot(AirfoilToolsData[i][:,1],(AirfoilToolsData[i][:,3]+AirfoilToolsData[i][:,4]),"--",color = color_cycle[i],label = "Aifoiltools.com Re $(round(Int,Re_airfoiltools[i]))")
        NDSpl_maxerror_cd = max(NDSpl_maxerror_cd,maximum(abs.(XfoilData_cd[i]-XfoilData_cd_old[i])))
    end
    PyPlot.xlabel("AOA")
    PyPlot.ylabel("cd")
    PyPlot.legend(loc = "best")

    #Plot the AirfoilTools Data vs the newly generated data and calculate the error
    PyPlot.figure("Verify_NDspline_cm")
    for i = 1:length(Re_airfoiltools)
        PyPlot.plot(aoas2[i],XfoilData_cm[i],"-",color = color_cycle[i],label = "NDtools Re $(round(Int,Re_airfoiltools[i]))")
        PyPlot.plot(AirfoilToolsData[i][:,1],AirfoilToolsData[i][:,5],"--",color = color_cycle[i],label = "Aifoiltools.com Re $(round(Int,Re_airfoiltools[i]))")
        NDSpl_maxerror_cm = max(NDSpl_maxerror_cm,maximum(abs.(XfoilData_cm[i]-XfoilData_cm_old[i])))
    end
    PyPlot.xlabel("AOA")
    PyPlot.ylabel("cm")
    PyPlot.legend(loc = "best")

    return NDSpl_maxerror_cl, NDSpl_maxerror_cd, NDSpl_maxerror_cm, NDtable
end

"""#-------- TEST NDtools Integration with AirfoilPrep.py 3D correction and extrapolation--------#

#Use S809 NREL airfoil data from previous test:
#2) Verify 3d correction
#3) Verify extrapolation
"""
function verifyNDtable_extrap(NDtable)
    # Test airfoilpreppy on the ND table
    r_over_R = 0.1
    c_over_r = 0.3
    TSR = 10.0
    grid_alphas=[i for i in -180:1.0:180]

    # Includes convergence checking for airfoil data

    NDextrap3D_3Dtable = AirfoilPrep.NDTable_correction3D_extrap(NDtable,r_over_R,c_over_r,TSR;grid_alphas=grid_alphas)

    # Spline the new table
    splout_extrap = AirfoilPrep.SplineND_from_tableND(NDextrap3D_3Dtable)


    #Plot the output and get the error
    Re_airfoiltools = [2E5,5E5,1E6]
    aoas = collect(linspace(-15,25,41))#linspace(-10,10,20)
    extrap_aoas = grid_alphas
    vars = []

    #Verify cl
    cl_re2E5 = [-6.93889e-18, 0.0710889, 0.142178, 0.213267, 0.284356, 0.355444, 0.426533, 0.497622, 0.568711, 0.639798, 0.710889, 0.706264, 0.644041, 0.60978, 0.599699, 0.588414, 0.574736, 0.564723, 0.558323, 0.553313, 0.54919, 0.546198, 0.544209, 0.54291, 0.542129, 0.541776, 0.541753, 0.541958, 0.542307, 0.542731, 0.54317, 0.54357, 0.543879, 0.544057, 0.544065, 0.543868, 0.543436, 0.542741, 0.54176, 0.54047, 0.538851, 0.536887, 0.534563, 0.531864, 0.52878, 0.5253, 0.521416, 0.51712, 0.512406, 0.507271, 0.501711, 0.495723, 0.489306, 0.482461, 0.475188, 0.467489, 0.459368, 0.450827, 0.441872, 0.432508, 0.422741, 0.412579, 0.402029, 0.3911, 0.379802, 0.368143, 0.356135, 0.343789, 0.331117, 0.318131, 0.304845, 0.291271, 0.277425, 0.26332, 0.248971, 0.234395, 0.219606, 0.204622, 0.189459, 0.174133, 0.158663, 0.143066, 0.12736, 0.111562, 0.0956922, 0.0797689, 0.0638084, 0.04783, 0.0318609, 0.015921, 5.46438e-17, -0.0159199, -0.0318597, -0.0478305, -0.063809, -0.0797686, -0.095692, -0.111562, -0.12736, -0.143066, -0.158663, -0.174133, -0.189459, -0.204622, -0.219606, -0.234395, -0.248971, -0.26332, -0.277425, -0.291271, -0.304845, -0.318131, -0.331117, -0.343789, -0.356135, -0.368143, -0.379802, -0.3911, -0.402029, -0.412579, -0.422741, -0.432508, -0.441872, -0.450827, -0.459368, -0.467489, -0.475188, -0.482461, -0.489306, -0.495723, -0.501711, -0.507271, -0.512406, -0.51712, -0.521416, -0.5253, -0.52878, -0.531864, -0.534563, -0.536887, -0.538851, -0.540469, -0.54176, -0.542741, -0.543436, -0.543868, -0.544065, -0.544057, -0.54388, -0.543572, -0.543167, -0.542723, -0.542323, -0.541988, -0.541683, -0.541677, -0.542433, -0.543233, -0.542934, -0.545235, -0.554433, -0.555852, -0.537131, -0.559945, -0.687255, -0.841618, -0.924748, -0.931658, -0.880691, -0.790188, -0.678492, -0.574841, -0.509658, -0.39926, -0.283084, -0.188724, -0.111711, -0.0369642, 0.059643, 0.12647, 0.18279, 0.261507, 0.352206, 0.442419, 0.540757, 0.638262, 0.738543, 0.847004, 0.941511, 0.979576, 1.01556, 0.984096, 0.91898, 0.877929, 0.857312, 0.838733, 0.820803, 0.80725, 0.797696, 0.790311, 0.784526, 0.780319, 0.777452, 0.775577, 0.774467, 0.773969, 0.773935, 0.774225, 0.774723, 0.77533, 0.775958, 0.776528, 0.77697, 0.777225, 0.777235, 0.776954, 0.776337, 0.775345, 0.773942, 0.772099, 0.769787, 0.766982, 0.763661, 0.759806, 0.7554, 0.750429, 0.74488, 0.738743, 0.732009, 0.724673, 0.716729, 0.708175, 0.699009, 0.68923, 0.67884, 0.667842, 0.65624, 0.644039, 0.631246, 0.617869, 0.603916, 0.589399, 0.574328, 0.558715, 0.542574, 0.525918, 0.508764, 0.491127, 0.473024, 0.454473, 0.435492, 0.416102, 0.396321, 0.376171, 0.355673, 0.33485, 0.313723, 0.292317, 0.270656, 0.248764, 0.22666, 0.204374, 0.181946, 0.159397, 0.136692, 0.113872, 0.091182, 0.0686367, 0.0454667, 0.0216205, 8.19657e-17, -0.0170457, -0.0319097, -0.0475216, -0.0637813, -0.0798529, -0.0957034, -0.111539, -0.127355, -0.143072, -0.158665, -0.174132, -0.189458, -0.204623, -0.219606, -0.234395, -0.248971, -0.26332, -0.277425, -0.291271, -0.304845, -0.318131, -0.331117, -0.343789, -0.356135, -0.368143, -0.379802, -0.3911, -0.402029, -0.412579, -0.422741, -0.432508, -0.441872, -0.450827, -0.459368, -0.467489, -0.475188, -0.482461, -0.489306, -0.495723, -0.501711, -0.507271, -0.512406, -0.51712, -0.521416, -0.5253, -0.52878, -0.531864, -0.534563, -0.536887, -0.538851, -0.54047, -0.54176, -0.542741, -0.543436, -0.543868, -0.544065, -0.544057, -0.543879, -0.54357, -0.54317, -0.542731, -0.542307, -0.541958, -0.541753, -0.541776, -0.542129, -0.54291, -0.544209, -0.546198, -0.54919, -0.553313, -0.558323, -0.564723, -0.574736, -0.588414, -0.599699, -0.60978, -0.644041, -0.706264, -0.710889, -0.639798, -0.568711, -0.497622, -0.426533, -0.355444, -0.284356, -0.213267, -0.142178, -0.0710889, 1.04083e-17]

    cl_re5E5 = [-1.73472e-18, 0.0602157, 0.120431, 0.180647, 0.240863, 0.301079, 0.361294, 0.42151, 0.481726, 0.541941, 0.602157, 0.662373, 0.722589, 0.782804, 0.84302, 0.903236, 0.963452, 1.02367, 1.08392, 1.1441, 1.12658, 1.0664, 1.03337, 1.01103, 0.984616, 0.959599, 0.938206, 0.918426, 0.899696, 0.882271, 0.86599, 0.85059, 0.835955, 0.821988, 0.808582, 0.795638, 0.783077, 0.770828, 0.758824, 0.747007, 0.735326, 0.723733, 0.712187, 0.700651, 0.689091, 0.677478, 0.665785, 0.653989, 0.642069, 0.630007, 0.617788, 0.605397, 0.592824, 0.580059, 0.567094, 0.553923, 0.540541, 0.526946, 0.513135, 0.499109, 0.484868, 0.470414, 0.455751, 0.440883, 0.425816, 0.410555, 0.395108, 0.379483, 0.363689, 0.347737, 0.331635, 0.315397, 0.299033, 0.282557, 0.265981, 0.24932, 0.232587, 0.215799, 0.19897, 0.182116, 0.165253, 0.148398, 0.131569, 0.114782, 0.0980559, 0.0814102, 0.0648603, 0.0484175, 0.0321186, 0.0160023, 5.46438e-17, -0.0160023, -0.0321186, -0.0484175, -0.0648603, -0.0814102, -0.0980559, -0.114782, -0.131569, -0.148398, -0.165253, -0.182116, -0.19897, -0.215799, -0.232587, -0.24932, -0.265981, -0.282557, -0.299033, -0.315397, -0.331635, -0.347737, -0.363689, -0.379483, -0.395108, -0.410555, -0.425816, -0.440883, -0.455751, -0.470414, -0.484868, -0.499109, -0.513135, -0.526946, -0.540541, -0.553923, -0.567094, -0.580059, -0.592824, -0.605397, -0.617788, -0.630007, -0.642069, -0.653989, -0.665785, -0.677478, -0.689091, -0.700651, -0.712187, -0.723733, -0.735326, -0.747007, -0.758824, -0.770828, -0.783077, -0.795638, -0.808582, -0.821989, -0.835955, -0.850588, -0.86599, -0.882283, -0.899691, -0.918378, -0.938258, -0.95977, -0.98428, -1.0105, -1.03512, -1.0676, -1.11853, -1.1441, -1.132, -1.1199, -1.1078, -1.0957, -1.07912, -1.04825, -0.994223, -0.908158, -0.796763, -0.710589, -0.642513, -0.578624, -0.522874, -0.432584, -0.314282, -0.199136, -0.083942, 0.0317878, 0.147605, 0.263386, 0.378268, 0.492687, 0.608554, 0.724047, 0.83675, 0.946249, 1.00482, 1.06638, 1.13316, 1.19639, 1.26051, 1.32466, 1.38519, 1.45089, 1.50516, 1.55792, 1.59636, 1.63443, 1.59574, 1.52547, 1.47921, 1.44343, 1.40603, 1.37115, 1.34038, 1.31196, 1.28527, 1.26041, 1.23713, 1.21512, 1.19422, 1.17427, 1.15512, 1.13663, 1.11868, 1.10118, 1.08403, 1.06715, 1.05047, 1.0339, 1.01741, 1.00093, 0.984416, 0.967825, 0.951121, 0.93427, 0.917241, 0.90001, 0.882554, 0.864853, 0.846892, 0.828656, 0.810135, 0.791319, 0.772202, 0.75278, 0.73305, 0.713013, 0.692668, 0.67202, 0.651073, 0.629833, 0.608308, 0.586507, 0.56444, 0.542118, 0.519556, 0.496766, 0.473765, 0.450567, 0.42719, 0.403652, 0.379973, 0.356171, 0.332268, 0.308284, 0.284242, 0.260165, 0.236077, 0.211997, 0.187951, 0.163981, 0.140099, 0.116262, 0.0925969, 0.0693683, 0.0460215, 0.0219374, 7.67615e-17, -0.0169252, -0.0319808, -0.0482172, -0.0649209, -0.0814486, -0.0980363, -0.114776, -0.131575, -0.148399, -0.165251, -0.182116, -0.19897, -0.215799, -0.232587, -0.24932, -0.265981, -0.282557, -0.299033, -0.315397, -0.331635, -0.347737, -0.363689, -0.379483, -0.395108, -0.410555, -0.425816, -0.440883, -0.455751, -0.470414, -0.484868, -0.499109, -0.513135, -0.526946, -0.540541, -0.553923, -0.567094, -0.580059, -0.592824, -0.605397, -0.617788, -0.630007, -0.642069, -0.653989, -0.665785, -0.677478, -0.689091, -0.700651, -0.712187, -0.723733, -0.735326, -0.747007, -0.758824, -0.770828, -0.783077, -0.795638, -0.808582, -0.821988, -0.835955, -0.85059, -0.86599, -0.882271, -0.899696, -0.918426, -0.938206, -0.959599, -0.984616, -1.01103, -1.03337, -1.0664, -1.12658, -1.1441, -1.08392, -1.02367, -0.963452, -0.903236, -0.84302, -0.782804, -0.722589, -0.662373, -0.602157, -0.541941, -0.481726, -0.42151, -0.361294, -0.301079, -0.240863, -0.180647, -0.120431, -0.0602157, 0.0]

    cl_re1E6 = [0.0, 0.0611951, 0.12239, 0.183585, 0.244781, 0.305976, 0.367171, 0.428366, 0.489561, 0.550756, 0.611951, 0.673147, 0.734342, 0.795537, 0.856732, 0.917927, 0.979122, 1.04032, 1.10151, 1.16266, 1.2239, 1.20354, 1.1403, 1.1052, 1.07995, 1.0505, 1.02289, 0.998896, 0.976429, 0.955105, 0.935169, 0.916411, 0.898582, 0.881576, 0.865292, 0.849617, 0.834456, 0.819729, 0.805362, 0.791288, 0.777449, 0.763792, 0.750269, 0.736838, 0.723461, 0.710104, 0.696737, 0.683333, 0.669868, 0.656321, 0.642674, 0.628911, 0.615018, 0.600984, 0.586799, 0.572454, 0.557945, 0.543265, 0.528414, 0.513388, 0.498187, 0.482814, 0.467269, 0.451556, 0.435681, 0.419648, 0.403463, 0.387136, 0.370673, 0.354084, 0.337379, 0.320569, 0.303666, 0.286681, 0.269628, 0.25252, 0.235371, 0.218195, 0.201009, 0.183827, 0.166666, 0.149541, 0.132472, 0.115473, 0.0985627, 0.0817619, 0.0650857, 0.0485438, 0.0321738, 0.016019, 5.37764e-17, -0.016019, -0.0321738, -0.0485438, -0.0650857, -0.0817619, -0.0985627, -0.115473, -0.132472, -0.149541, -0.166666, -0.183827, -0.201009, -0.218195, -0.235371, -0.25252, -0.269628, -0.286681, -0.303666, -0.320569, -0.337379, -0.354084, -0.370673, -0.387136, -0.403463, -0.419648, -0.435681, -0.451556, -0.467269, -0.482814, -0.498187, -0.513388, -0.528414, -0.543265, -0.557945, -0.572454, -0.586799, -0.600984, -0.615018, -0.628911, -0.642674, -0.656321, -0.669868, -0.683333, -0.696737, -0.710104, -0.723461, -0.736838, -0.750269, -0.763792, -0.777449, -0.791288, -0.805362, -0.819729, -0.834456, -0.849617, -0.865292, -0.881576, -0.898581, -0.91641, -0.935175, -0.955105, -0.976404, -0.998913, -1.02299, -1.05035, -1.07964, -1.10608, -1.14103, -1.19928, -1.2239, -1.19728, -1.17065, -1.14402, -1.11739, -1.09076, -1.07364, -1.02629, -0.950443, -0.86474, -0.781887, -0.714245, -0.648466, -0.576098, -0.495538, -0.408187, -0.293607, -0.180152, -0.0666353, 0.0465763, 0.159897, 0.273285, 0.386618, 0.499418, 0.611573, 0.723097, 0.83408, 0.916965, 0.997663, 1.07595, 1.15166, 1.22615, 1.29979, 1.3691, 1.43273, 1.49834, 1.55944, 1.61213, 1.66769, 1.71067, 1.74843, 1.70568, 1.63133, 1.58167, 1.54179, 1.50024, 1.46158, 1.42705, 1.39482, 1.36444, 1.33597, 1.30916, 1.28368, 1.2594, 1.23613, 1.21374, 1.19208, 1.17104, 1.15052, 1.13041, 1.11064, 1.09113, 1.07181, 1.05263, 1.03352, 1.01443, 0.995339, 0.97619, 0.956954, 0.937602, 0.918106, 0.898445, 0.878598, 0.858549, 0.838284, 0.817792, 0.797064, 0.776094, 0.754877, 0.733411, 0.711696, 0.689734, 0.667527, 0.64508, 0.622401, 0.599496, 0.576376, 0.553051, 0.529532, 0.505834, 0.48197, 0.457956, 0.433808, 0.409544, 0.385183, 0.360742, 0.336244, 0.311708, 0.287155, 0.26261, 0.238095, 0.213631, 0.18924, 0.164965, 0.140824, 0.116771, 0.0929147, 0.0695333, 0.0461155, 0.0219854, 7.67615e-17, -0.0169179, -0.0320209, -0.0483589, -0.0651506, -0.0817935, -0.0985428, -0.115469, -0.132477, -0.149541, -0.166664, -0.183827, -0.201009, -0.218195, -0.235371, -0.25252, -0.269628, -0.286681, -0.303666, -0.320569, -0.337379, -0.354084, -0.370673, -0.387136, -0.403463, -0.419648, -0.435681, -0.451556, -0.467269, -0.482814, -0.498187, -0.513388, -0.528414, -0.543265, -0.557945, -0.572454, -0.586799, -0.600984, -0.615018, -0.628911, -0.642674, -0.656321, -0.669868, -0.683333, -0.696737, -0.710104, -0.723461, -0.736838, -0.750269, -0.763792, -0.777449, -0.791288, -0.805362, -0.819729, -0.834456, -0.849617, -0.865292, -0.881576, -0.898582, -0.916411, -0.935169, -0.955105, -0.976429, -0.998896, -1.02289, -1.0505, -1.07995, -1.1052, -1.1403, -1.20354, -1.2239, -1.16266, -1.10151, -1.04032, -0.979122, -0.917927, -0.856732, -0.795537, -0.734342, -0.673147, -0.611951, -0.550756, -0.489561, -0.428366, -0.367171, -0.305976, -0.244781, -0.183585, -0.12239, -0.0611951, 0.0]

    extrap_cl_old = (cl_re2E5,cl_re5E5,cl_re1E6)
    ND_corr3Dextr_maxerror_cl = 0.0

    #Plot the output and get the error
    extrap_cl =zeros(length(extrap_aoas),length(Re_airfoiltools))
    PyPlot.figure("Verify_cl")
    for i = 1:length(Re_airfoiltools) #length of the airfoiltools data
        for j = 1:length(extrap_aoas)
            vars = [extrap_aoas[j],Re_airfoiltools[i],0.0]
            extrap_cl[j,i] = AirfoilPrep.interpND(splout_extrap[1],vars)

        end
        PyPlot.plot(extrap_aoas,extrap_cl[:,i],label = "Re: $(Re_airfoiltools[i])")
        ND_corr3Dextr_maxerror_cl = max(ND_corr3Dextr_maxerror_cl,maximum(abs.(extrap_cl[:,i]-extrap_cl_old[i])))
    end
    PyPlot.xlabel("aoa (deg)")
    PyPlot.ylabel("cl")

    # Verify cd

    cd_re2E5 =[0.0144709, 0.0148647, 0.0160455, 0.0180118, 0.0207614, 0.0242908, 0.0285957, 0.0336708, 0.03951, 0.046106, 0.0534509, 0.0615356, 0.0703501, 0.0798839, 0.0901251, 0.101061, 0.112679, 0.124964, 0.137902, 0.151476, 0.165669, 0.180466, 0.195846, 0.211793, 0.228285, 0.245303, 0.262826, 0.280833, 0.299302, 0.318209, 0.337532, 0.357247, 0.377331, 0.397758, 0.418503, 0.439541, 0.460846, 0.482393, 0.504154, 0.526103, 0.548214, 0.570459, 0.59281, 0.615242, 0.637725, 0.660232, 0.682737, 0.705211, 0.727626, 0.749956, 0.772173, 0.794249, 0.816158, 0.837873, 0.859367, 0.880613, 0.901586, 0.92226, 0.94261, 0.96261, 0.982235, 1.00146, 1.02027, 1.03863, 1.05652, 1.07393, 1.09082, 1.10718, 1.12299, 1.13823, 1.15288, 1.16692, 1.18033, 1.19311, 1.20522, 1.21666, 1.22742, 1.23747, 1.24681, 1.25543, 1.26331, 1.27045, 1.27683, 1.28246, 1.28731, 1.29138, 1.29469, 1.29722, 1.29892, 1.29977, 1.3, 1.29978, 1.29893, 1.29721, 1.29468, 1.29138, 1.28731, 1.28246, 1.27683, 1.27045, 1.26331, 1.25543, 1.24681, 1.23747, 1.22742, 1.21666, 1.20522, 1.19311, 1.18033, 1.16692, 1.15288, 1.13823, 1.12299, 1.10718, 1.09082, 1.07393, 1.05652, 1.03863, 1.02027, 1.00146, 0.982235, 0.96261, 0.94261, 0.92226, 0.901586, 0.880613, 0.859367, 0.837873, 0.816158, 0.794249, 0.772173, 0.749956, 0.727626, 0.705211, 0.682737, 0.660232, 0.637725, 0.615242, 0.59281, 0.570459, 0.548214, 0.526103, 0.504154, 0.482393, 0.460846, 0.439541, 0.418503, 0.397757, 0.377331, 0.35725, 0.337529, 0.318202, 0.299315, 0.280859, 0.262766, 0.245217, 0.228542, 0.212072, 0.19477, 0.179619, 0.170082, 0.153748, 0.12011, 0.120403, 0.205288, 0.300059, 0.315723, 0.263895, 0.181349, 0.104858, 0.071194, 0.0817083, 0.0646703, 0.111112, 0.124808, 0.118258, 0.106538, 0.0959124, 0.0918992, 0.0771186, 0.0585404, 0.0492778, 0.0501018, 0.04867, 0.049465, 0.0485989, 0.044317, 0.0359786, 0.027796, 0.0329491, 0.0534509, 0.0651195, 0.0705058, 0.0789012, 0.0900387, 0.101329, 0.112715, 0.124892, 0.137888, 0.151495, 0.165674, 0.18046, 0.195845, 0.211794, 0.228285, 0.245303, 0.262826, 0.280833, 0.299302, 0.318209, 0.337532, 0.357247, 0.377331, 0.397758, 0.418503, 0.439541, 0.460846, 0.482393, 0.504154, 0.526103, 0.548214, 0.570459, 0.59281, 0.615242, 0.637725, 0.660232, 0.682737, 0.705211, 0.727626, 0.749956, 0.772173, 0.794249, 0.816158, 0.837873, 0.859367, 0.880613, 0.901586, 0.92226, 0.94261, 0.96261, 0.982235, 1.00146, 1.02027, 1.03863, 1.05652, 1.07393, 1.09082, 1.10718, 1.12299, 1.13823, 1.15288, 1.16692, 1.18033, 1.19311, 1.20522, 1.21666, 1.22742, 1.23747, 1.24681, 1.25543, 1.26331, 1.27045, 1.27683, 1.28246, 1.28731, 1.29138, 1.29469, 1.29722, 1.29892, 1.29977, 1.3, 1.29977, 1.29892, 1.29722, 1.29469, 1.29138, 1.28731, 1.28246, 1.27683, 1.27045, 1.26331, 1.25543, 1.24681, 1.23747, 1.22742, 1.21666, 1.20522, 1.19311, 1.18033, 1.16692, 1.15288, 1.13823, 1.12299, 1.10718, 1.09082, 1.07393, 1.05652, 1.03863, 1.02027, 1.00146, 0.982235, 0.96261, 0.94261, 0.92226, 0.901586, 0.880613, 0.859367, 0.837873, 0.816158, 0.794249, 0.772173, 0.749956, 0.727626, 0.705211, 0.682737, 0.660232, 0.637725, 0.615242, 0.59281, 0.570459, 0.548214, 0.526103, 0.504154, 0.482393, 0.460846, 0.439541, 0.418503, 0.397758, 0.377331, 0.357247, 0.337532, 0.318209, 0.299302, 0.280833, 0.262826, 0.245303, 0.228285, 0.211793, 0.195846, 0.180466, 0.165669, 0.151476, 0.137902, 0.124964, 0.112679, 0.101061, 0.0901251, 0.0798839, 0.0703501, 0.0615356, 0.0534509, 0.046106, 0.03951, 0.0336708, 0.0285957, 0.0242908, 0.0207614, 0.0180118, 0.0160455, 0.0148647, 0.0144709]

    cd_re5E5 =[0.186304, 0.186672, 0.187774, 0.18961, 0.192176, 0.19547, 0.199488, 0.204223, 0.209671, 0.215824, 0.222674, 0.230212, 0.238428, 0.247313, 0.256854, 0.26704, 0.277856, 0.289289, 0.301325, 0.313947, 0.32714, 0.340886, 0.355167, 0.369966, 0.385263, 0.401037, 0.417269, 0.433938, 0.451021, 0.468498, 0.486344, 0.504537, 0.523054, 0.541869, 0.560959, 0.580298, 0.599862, 0.619625, 0.639561, 0.659643, 0.679846, 0.700143, 0.720508, 0.740913, 0.761331, 0.781737, 0.802102, 0.822401, 0.842605, 0.862689, 0.882625, 0.902388, 0.92195, 0.941285, 0.960368, 0.979173, 0.997674, 1.01585, 1.03367, 1.05111, 1.06815, 1.08477, 1.10094, 1.11664, 1.13185, 1.14655, 1.16071, 1.17432, 1.18736, 1.19981, 1.21165, 1.22286, 1.23343, 1.24334, 1.25258, 1.26114, 1.26899, 1.27613, 1.28254, 1.28822, 1.29315, 1.29733, 1.30074, 1.3034, 1.30529, 1.30633, 1.30661, 1.30638, 1.30505, 1.30198, 1.3, 1.30198, 1.30505, 1.30638, 1.30661, 1.30633, 1.30529, 1.3034, 1.30074, 1.29733, 1.29315, 1.28822, 1.28254, 1.27613, 1.26899, 1.26114, 1.25258, 1.24334, 1.23343, 1.22286, 1.21165, 1.19981, 1.18736, 1.17432, 1.16071, 1.14655, 1.13185, 1.11664, 1.10094, 1.08477, 1.06815, 1.05111, 1.03367, 1.01585, 0.997674, 0.979173, 0.960368, 0.941285, 0.92195, 0.902388, 0.882625, 0.862689, 0.842605, 0.822401, 0.802102, 0.781737, 0.761331, 0.740913, 0.720508, 0.700143, 0.679846, 0.659643, 0.639561, 0.619625, 0.599862, 0.580298, 0.560959, 0.541869, 0.523054, 0.504536, 0.486344, 0.468503, 0.45102, 0.433919, 0.41729, 0.401106, 0.385128, 0.369753, 0.35587, 0.341369, 0.323903, 0.313947, 0.313742, 0.313538, 0.313333, 0.313128, 0.281875, 0.216725, 0.148941, 0.109786, 0.10987, 0.0972513, 0.076214, 0.0537184, 0.0268625, 0.0166311, 0.0208801, 0.0200221, 0.0193134, 0.0195365, 0.0198265, 0.0200853, 0.0204367, 0.020811, 0.0203991, 0.0187175, 0.0164308, 0.0141003, 0.0209927, 0.0301028, 0.0432544, 0.0596174, 0.0768768, 0.0958465, 0.118513, 0.142191, 0.173404, 0.209488, 0.257757, 0.313947, 0.334923, 0.339724, 0.353478, 0.370477, 0.385587, 0.400872, 0.417219, 0.433984, 0.451026, 0.468486, 0.486345, 0.50454, 0.523053, 0.541869, 0.560959, 0.580299, 0.599862, 0.619625, 0.639561, 0.659643, 0.679846, 0.700143, 0.720508, 0.740913, 0.761331, 0.781737, 0.802102, 0.822401, 0.842605, 0.862689, 0.882625, 0.902388, 0.92195, 0.941285, 0.960368, 0.979173, 0.997674, 1.01585, 1.03367, 1.05111, 1.06815, 1.08477, 1.10094, 1.11664, 1.13185, 1.14655, 1.16071, 1.17432, 1.18736, 1.19981, 1.21165, 1.22286, 1.23343, 1.24334, 1.25258, 1.26114, 1.26899, 1.27613, 1.28254, 1.28822, 1.29315, 1.29733, 1.30074, 1.3034, 1.30529, 1.30633, 1.30661, 1.30638, 1.30505, 1.30198, 1.3, 1.30198, 1.30505, 1.30638, 1.30661, 1.30633, 1.30529, 1.3034, 1.30074, 1.29733, 1.29315, 1.28822, 1.28254, 1.27613, 1.26899, 1.26114, 1.25258, 1.24334, 1.23343, 1.22286, 1.21165, 1.19981, 1.18736, 1.17432, 1.16071, 1.14655, 1.13185, 1.11664, 1.10094, 1.08477, 1.06815, 1.05111, 1.03367, 1.01585, 0.997674, 0.979173, 0.960368, 0.941285, 0.92195, 0.902388, 0.882625, 0.862689, 0.842605, 0.822401, 0.802102, 0.781737, 0.761331, 0.740913, 0.720508, 0.700143, 0.679846, 0.659643, 0.639561, 0.619625, 0.599862, 0.580298, 0.560959, 0.541869, 0.523054, 0.504537, 0.486344, 0.468498, 0.451021, 0.433938, 0.417269, 0.401037, 0.385263, 0.369966, 0.355167, 0.340886, 0.32714, 0.313947, 0.301325, 0.289289, 0.277856, 0.26704, 0.256854, 0.247313, 0.238428, 0.230212, 0.222674, 0.215824, 0.209671, 0.204223, 0.199488, 0.19547, 0.192176, 0.18961, 0.187774, 0.186672, 0.186304]

    cd_re1E6 =[0.153083, 0.153456, 0.154573, 0.156434, 0.159036, 0.162376, 0.166449, 0.17125, 0.176773, 0.183012, 0.189957, 0.197601, 0.205934, 0.214944, 0.22462, 0.234951, 0.245922, 0.25752, 0.26973, 0.282536, 0.295922, 0.309871, 0.324366, 0.339386, 0.354914, 0.370929, 0.38741, 0.404338, 0.421689, 0.439442, 0.457574, 0.476062, 0.494881, 0.514008, 0.533418, 0.553085, 0.572986, 0.593093, 0.613382, 0.633825, 0.654397, 0.675071, 0.69582, 0.716616, 0.737434, 0.758246, 0.779025, 0.799744, 0.820376, 0.840894, 0.861271, 0.881481, 0.901497, 0.921292, 0.940841, 0.960118, 0.979097, 0.997754, 1.01606, 1.034, 1.05154, 1.06866, 1.08534, 1.10156, 1.11729, 1.13251, 1.1472, 1.16134, 1.17492, 1.1879, 1.20029, 1.21205, 1.22317, 1.23363, 1.24343, 1.25254, 1.26095, 1.26865, 1.27563, 1.28188, 1.28738, 1.29213, 1.29612, 1.29935, 1.30181, 1.30344, 1.3043, 1.3046, 1.30388, 1.30158, 1.3, 1.30158, 1.30388, 1.3046, 1.3043, 1.30344, 1.30181, 1.29935, 1.29612, 1.29213, 1.28738, 1.28188, 1.27563, 1.26865, 1.26095, 1.25254, 1.24343, 1.23363, 1.22317, 1.21205, 1.20029, 1.1879, 1.17492, 1.16134, 1.1472, 1.13251, 1.11729, 1.10156, 1.08534, 1.06866, 1.05154, 1.034, 1.01606, 0.997754, 0.979097, 0.960118, 0.940841, 0.921292, 0.901497, 0.881481, 0.861271, 0.840894, 0.820376, 0.799744, 0.779025, 0.758246, 0.737434, 0.716616, 0.69582, 0.675071, 0.654397, 0.633825, 0.613382, 0.593094, 0.572986, 0.553085, 0.533418, 0.514008, 0.49488, 0.476061, 0.457576, 0.439442, 0.421679, 0.404345, 0.387449, 0.370867, 0.354788, 0.339746, 0.324663, 0.308124, 0.295922, 0.289413, 0.282903, 0.276393, 0.269883, 0.263374, 0.191415, 0.136011, 0.115273, 0.103919, 0.0901702, 0.0699532, 0.0488187, 0.0312158, 0.0159752, 0.00113993, 0.00537407, 0.00691591, 0.00828187, 0.00929748, 0.0103711, 0.0113919, 0.0121304, 0.0127279, 0.0118151, 0.0110317, 0.0100301, 0.0139994, 0.0185586, 0.0238585, 0.0322583, 0.0439043, 0.0568627, 0.07211, 0.0906949, 0.110533, 0.134984, 0.166113, 0.19883, 0.243005, 0.295922, 0.316765, 0.323193, 0.337968, 0.355411, 0.371171, 0.387257, 0.40431, 0.421729, 0.439441, 0.457565, 0.476063, 0.494883, 0.514007, 0.533417, 0.553086, 0.572986, 0.593093, 0.613382, 0.633826, 0.654397, 0.675071, 0.69582, 0.716616, 0.737434, 0.758246, 0.779025, 0.799744, 0.820376, 0.840894, 0.861271, 0.881481, 0.901497, 0.921292, 0.940841, 0.960118, 0.979097, 0.997754, 1.01606, 1.034, 1.05154, 1.06866, 1.08534, 1.10156, 1.11729, 1.13251, 1.1472, 1.16134, 1.17492, 1.1879, 1.20029, 1.21205, 1.22317, 1.23363, 1.24343, 1.25254, 1.26095, 1.26865, 1.27563, 1.28188, 1.28738, 1.29213, 1.29612, 1.29935, 1.30181, 1.30344, 1.3043, 1.3046, 1.30388, 1.30158, 1.3, 1.30158, 1.30388, 1.3046, 1.3043, 1.30344, 1.30181, 1.29935, 1.29612, 1.29213, 1.28738, 1.28188, 1.27563, 1.26865, 1.26095, 1.25254, 1.24343, 1.23363, 1.22317, 1.21205, 1.20029, 1.1879, 1.17492, 1.16134, 1.1472, 1.13251, 1.11729, 1.10156, 1.08534, 1.06866, 1.05154, 1.034, 1.01606, 0.997754, 0.979097, 0.960118, 0.940841, 0.921292, 0.901497, 0.881481, 0.861271, 0.840894, 0.820376, 0.799744, 0.779025, 0.758246, 0.737434, 0.716616, 0.69582, 0.675071, 0.654397, 0.633825, 0.613382, 0.593093, 0.572986, 0.553085, 0.533418, 0.514008, 0.494881, 0.476062, 0.457574, 0.439442, 0.421689, 0.404338, 0.38741, 0.370929, 0.354914, 0.339386, 0.324366, 0.309871, 0.295922, 0.282536, 0.26973, 0.25752, 0.245922, 0.234951, 0.22462, 0.214944, 0.205934, 0.197601, 0.189957, 0.183012, 0.176773, 0.17125, 0.166449, 0.162376, 0.159036, 0.156434, 0.154573, 0.153456, 0.153083]

    extrap_cd_old = (cd_re2E5,cd_re5E5,cd_re1E6)
    ND_corr3Dextr_maxerror_cd = 0.0

    #Plot the output and get the error
    extrap_cd =zeros(length(extrap_aoas),length(Re_airfoiltools))
    PyPlot.figure("Verify_cd")
    for i = 1:length(Re_airfoiltools) #length of the airfoiltools data
        for j = 1:length(extrap_aoas)
            vars = [extrap_aoas[j],Re_airfoiltools[i],0.0]
            extrap_cd[j,i] = AirfoilPrep.interpND(splout_extrap[2],vars)

        end

        PyPlot.plot(extrap_aoas,extrap_cd[:,i],label = "Re: $(Re_airfoiltools[i])")
        ND_corr3Dextr_maxerror_cd = max(ND_corr3Dextr_maxerror_cd,maximum(abs.(extrap_cd[:,i]-extrap_cd_old[i])))
    end
    PyPlot.xlabel("aoa (deg)")
    PyPlot.ylabel("cd")

    #Verify cm
    cm_re2E5 = [0.0, 0.04, 0.08, 0.12, 0.16, 0.2, 0.24, 0.28, 0.32, 0.359999, 0.4, 0.400033, 0.367674, 0.345912, 0.333518, 0.318557, 0.301001, 0.284258, 0.267912, 0.250748, 0.236891, 0.231955, 0.233216, 0.234079, 0.233218, 0.232398, 0.232056, 0.231704, 0.231231, 0.230846, 0.231002, 0.232331, 0.234704, 0.237218, 0.239465, 0.241669, 0.243945, 0.246215, 0.248463, 0.250784, 0.253281, 0.256051, 0.259099, 0.262232, 0.265306, 0.268355, 0.271417, 0.27449, 0.277561, 0.280622, 0.283668, 0.286696, 0.289706, 0.29271, 0.29572, 0.298726, 0.301718, 0.304732, 0.307795, 0.310787, 0.313542, 0.316063, 0.318438, 0.320749, 0.32307, 0.325403, 0.327705, 0.330023, 0.332455, 0.334828, 0.336752, 0.338175, 0.33938, 0.340544, 0.341715, 0.342894, 0.344031, 0.345162, 0.346448, 0.347771, 0.348536, 0.348491, 0.348121, 0.347813, 0.347551, 0.347275, 0.34695, 0.346593, 0.346376, 0.346314, 0.345776, 0.34426, 0.34232, 0.340557, 0.338899, 0.337194, 0.335436, 0.333681, 0.332055, 0.330442, 0.328313, 0.32552, 0.322484, 0.319446, 0.316415, 0.313378, 0.310323, 0.307284, 0.304313, 0.301263, 0.297899, 0.294213, 0.290316, 0.286332, 0.28237, 0.278426, 0.274473, 0.270524, 0.266588, 0.262611, 0.258533, 0.2543, 0.249918, 0.245497, 0.24111, 0.23673, 0.232341, 0.227951, 0.223563, 0.219175, 0.21479, 0.210414, 0.206046, 0.201678, 0.197307, 0.192933, 0.188565, 0.184209, 0.17983, 0.175405, 0.171086, 0.167009, 0.163037, 0.159021, 0.154979, 0.150949, 0.146931, 0.142913, 0.138865, 0.134814, 0.13088, 0.127083, 0.123301, 0.119532, 0.115901, 0.112186, 0.107949, 0.104166, 0.102331, 0.0982544, 0.0851792, 0.0634008, 0.0363821, 0.00569205, -0.0267118, -0.0531119, -0.0661913, -0.0674821, -0.0607285, -0.0496749, -0.0380655, -0.0304781, -0.0277283, -0.0161606, -0.0158703, -0.0182155, -0.0192237, -0.0197291, -0.0224647, -0.0236994, -0.0268114, -0.0331048, -0.0337455, -0.0384099, -0.0386892, -0.0400551, -0.0411134, -0.0418757, -0.039125, -0.0217998, 1.30104e-18, -0.00456308, -0.0239259, -0.0384465, -0.0486878, -0.0601031, -0.0727017, -0.0849231, -0.096972, -0.10941, -0.120259, -0.126836, -0.130446, -0.134247, -0.138873, -0.143481, -0.147859, -0.152235, -0.156674, -0.161102, -0.165438, -0.169601, -0.173614, -0.177606, -0.181637, -0.185674, -0.1897, -0.193729, -0.197762, -0.201776, -0.205746, -0.209649, -0.213482, -0.217294, -0.221122, -0.224953, -0.228777, -0.232612, -0.23646, -0.240266, -0.243976, -0.24758, -0.251087, -0.254553, -0.258035, -0.261523, -0.264999, -0.268488, -0.272016, -0.27549, -0.278783, -0.281899, -0.284903, -0.287858, -0.29082, -0.293791, -0.296744, -0.299706, -0.302736, -0.305731, -0.308459, -0.310891, -0.313192, -0.31547, -0.317752, -0.320038, -0.322299, -0.324558, -0.326906, -0.329275, -0.331322, -0.332901, -0.334292, -0.335718, -0.337173, -0.338622, -0.340034, -0.34142, -0.342915, -0.344529, -0.345776, -0.346259, -0.346374, -0.346608, -0.346951, -0.347271, -0.347551, -0.347814, -0.348122, -0.348491, -0.348536, -0.347771, -0.346448, -0.345162, -0.344031, -0.342894, -0.341715, -0.340544, -0.33938, -0.338175, -0.336752, -0.334828, -0.332455, -0.330023, -0.327705, -0.325403, -0.32307, -0.320749, -0.318438, -0.316063, -0.313542, -0.310787, -0.307795, -0.304732, -0.301718, -0.298726, -0.29572, -0.29271, -0.289706, -0.286696, -0.283668, -0.280622, -0.277561, -0.27449, -0.271417, -0.268355, -0.265306, -0.262232, -0.259099, -0.256051, -0.253281, -0.250784, -0.248463, -0.246215, -0.243945, -0.241669, -0.239465, -0.237218, -0.234706, -0.232333, -0.230998, -0.230839, -0.231244, -0.231731, -0.232014, -0.232295, -0.233351, -0.234471, -0.232798, -0.230481, -0.2382, -0.260381, -0.287984, -0.314295, -0.34104, -0.368951, -0.39338, -0.414317, -0.447928, -0.49589, -0.5, -0.449999, -0.4, -0.35, -0.3, -0.25, -0.2, -0.15, -0.1, -0.05, 0.0]

    cm_re5E5 = [-2.60209e-18, 0.04, 0.08, 0.12, 0.16, 0.2, 0.24, 0.28, 0.319996, 0.359935, 0.398376, 0.420341, 0.440821, 0.461238, 0.48165, 0.502063, 0.522476, 0.542889, 0.563305, 0.583714, 0.59363, 0.588554, 0.572398, 0.553779, 0.537337, 0.521046, 0.504299, 0.488041, 0.471217, 0.452809, 0.438291, 0.432208, 0.429168, 0.424711, 0.419899, 0.415492, 0.411156, 0.406673, 0.402022, 0.397718, 0.39443, 0.392442, 0.391633, 0.391121, 0.390373, 0.389577, 0.38885, 0.388166, 0.387409, 0.386506, 0.385949, 0.386167, 0.386671, 0.387037, 0.387367, 0.387735, 0.388105, 0.388467, 0.388837, 0.389196, 0.389509, 0.389766, 0.389973, 0.390166, 0.390368, 0.390581, 0.390786, 0.390953, 0.391168, 0.391515, 0.391579, 0.390969, 0.3901, 0.389358, 0.388658, 0.387921, 0.387162, 0.386427, 0.385764, 0.384986, 0.383821, 0.382195, 0.380171, 0.378036, 0.375977, 0.373933, 0.371869, 0.369808, 0.367747, 0.365672, 0.363624, 0.361645, 0.359693, 0.357727, 0.35576, 0.353797, 0.351815, 0.349847, 0.347952, 0.34595, 0.343569, 0.340747, 0.337557, 0.334256, 0.331024, 0.327815, 0.324584, 0.321322, 0.318096, 0.314979, 0.31164, 0.307727, 0.303573, 0.299531, 0.29553, 0.291497, 0.287454, 0.283423, 0.27941, 0.27537, 0.271236, 0.266995, 0.262667, 0.258311, 0.253972, 0.249637, 0.245297, 0.240956, 0.236617, 0.232283, 0.227939, 0.223565, 0.219179, 0.214798, 0.210421, 0.206042, 0.201656, 0.197274, 0.19292, 0.188532, 0.184006, 0.179331, 0.174539, 0.169702, 0.164883, 0.160101, 0.155306, 0.150383, 0.145571, 0.14121, 0.135879, 0.127857, 0.118578, 0.109793, 0.101255, 0.0925682, 0.0837432, 0.075012, 0.0667091, 0.057909, 0.0468943, 0.0325212, 0.016045, -0.000431307, -0.0169076, -0.0333839, -0.0438168, -0.0453779, -0.0409069, -0.0332429, -0.0260745, -0.0236179, -0.02154, -0.0204999, -0.0225656, -0.0292425, -0.0310045, -0.0339394, -0.0367941, -0.0393168, -0.0419707, -0.0446739, -0.0471477, -0.0492277, -0.0512713, -0.0527747, -0.0533284, -0.0526812, -0.0397054, -0.0306905, -0.0274788, -0.0246275, -0.0219109, -0.0195295, -0.0178726, -0.0178988, -0.0181141, -0.0201363, -0.0239134, -0.0308128, -0.0473079, -0.0651708, -0.0769492, -0.0870578, -0.0986165, -0.110423, -0.121814, -0.132972, -0.14457, -0.156959, -0.16731, -0.173319, -0.177763, -0.182936, -0.188288, -0.193434, -0.198551, -0.203735, -0.208977, -0.214094, -0.218856, -0.223164, -0.22706, -0.230852, -0.234726, -0.238618, -0.242485, -0.246334, -0.250213, -0.254153, -0.257948, -0.261418, -0.264767, -0.268173, -0.271597, -0.275004, -0.278404, -0.281813, -0.285242, -0.288636, -0.291921, -0.295071, -0.298102, -0.301099, -0.30412, -0.307151, -0.310173, -0.313171, -0.3162, -0.319306, -0.322244, -0.324779, -0.327159, -0.329614, -0.332096, -0.334554, -0.337, -0.33946, -0.341963, -0.344397, -0.346603, -0.348538, -0.350237, -0.351872, -0.353551, -0.355236, -0.356911, -0.358601, -0.360276, -0.361895, -0.363624, -0.365633, -0.367753, -0.369816, -0.371866, -0.373931, -0.375978, -0.378037, -0.380171, -0.382195, -0.383821, -0.384986, -0.385764, -0.386427, -0.387162, -0.387921, -0.388658, -0.389358, -0.3901, -0.390969, -0.391579, -0.391515, -0.391168, -0.390953, -0.390786, -0.390581, -0.390368, -0.390166, -0.389973, -0.389766, -0.389509, -0.389196, -0.388837, -0.388467, -0.388105, -0.387735, -0.387367, -0.387037, -0.386671, -0.386167, -0.385949, -0.386506, -0.387409, -0.388166, -0.38885, -0.389577, -0.390373, -0.391121, -0.391633, -0.392442, -0.39443, -0.397718, -0.402022, -0.406673, -0.411156, -0.415492, -0.419899, -0.42471, -0.429168, -0.432209, -0.438291, -0.452806, -0.471219, -0.488052, -0.504287, -0.521005, -0.537417, -0.553905, -0.571982, -0.588268, -0.596464, -0.593714, -0.583304, -0.572889, -0.562476, -0.552063, -0.54165, -0.531237, -0.520816, -0.510268, -0.496718, -0.449868, -0.399991, -0.349999, -0.3, -0.25, -0.2, -0.15, -0.1, -0.05, 1.73472e-18]

    cm_re1E6 = [0.0, 0.04, 0.08, 0.12, 0.16, 0.2, 0.24, 0.28, 0.319996, 0.359946, 0.398862, 0.42695, 0.454004, 0.481011, 0.508016, 0.53502, 0.562023, 0.589027, 0.616028, 0.643014, 0.670039, 0.659266, 0.627498, 0.606714, 0.588923, 0.5681, 0.547244, 0.52694, 0.505973, 0.486053, 0.46985, 0.458939, 0.452886, 0.447749, 0.441602, 0.435372, 0.429428, 0.423596, 0.417396, 0.410837, 0.405983, 0.403828, 0.402526, 0.401033, 0.399534, 0.398089, 0.39664, 0.395169, 0.393689, 0.392278, 0.391147, 0.390692, 0.390817, 0.390941, 0.390943, 0.390966, 0.391014, 0.391053, 0.391085, 0.391119, 0.391172, 0.391244, 0.391325, 0.391409, 0.391491, 0.391574, 0.391659, 0.391735, 0.391812, 0.391923, 0.391881, 0.391352, 0.390517, 0.389749, 0.389042, 0.388313, 0.387553, 0.386805, 0.386147, 0.385406, 0.384231, 0.382585, 0.380612, 0.378532, 0.376503, 0.374492, 0.372466, 0.370432, 0.368408, 0.36641, 0.364361, 0.362183, 0.359954, 0.35775, 0.355558, 0.353357, 0.351141, 0.348943, 0.346792, 0.344542, 0.341986, 0.338992, 0.335593, 0.332116, 0.328725, 0.325343, 0.321933, 0.318505, 0.315129, 0.311809, 0.30823, 0.30424, 0.30012, 0.29603, 0.29194, 0.287842, 0.283745, 0.279651, 0.275559, 0.271456, 0.267315, 0.26308, 0.258765, 0.254451, 0.250153, 0.245852, 0.241548, 0.237245, 0.232942, 0.228638, 0.22434, 0.220048, 0.215759, 0.21147, 0.207181, 0.202893, 0.198605, 0.194312, 0.190019, 0.18575, 0.181372, 0.176651, 0.171711, 0.166813, 0.161972, 0.157124, 0.152188, 0.147271, 0.142703, 0.137821, 0.131258, 0.122884, 0.113251, 0.10319, 0.0933212, 0.0835837, 0.0737709, 0.0636658, 0.0538606, 0.0450894, 0.034335, 0.020765, 0.00719501, -0.00637499, -0.019945, -0.033515, -0.037818, -0.0325546, -0.0255341, -0.0223279, -0.0210895, -0.0188183, -0.0178605, -0.0182186, -0.0223099, -0.0295553, -0.0321853, -0.0349487, -0.0377451, -0.0404905, -0.0431673, -0.0458499, -0.0484486, -0.0508638, -0.0527459, -0.0543582, -0.0557457, -0.0494517, -0.0430175, -0.0367772, -0.0326887, -0.0308393, -0.029174, -0.0271752, -0.0249823, -0.0234833, -0.0230162, -0.0229448, -0.024175, -0.0271544, -3.25261e-18, -0.00768629, -0.03427, -0.0509684, -0.0649667, -0.0816968, -0.0984779, -0.114739, -0.131519, -0.147516, -0.160654, -0.169727, -0.175073, -0.179721, -0.185141, -0.190608, -0.195876, -0.20112, -0.206509, -0.212013, -0.216935, -0.220944, -0.224663, -0.228446, -0.232232, -0.236, -0.239768, -0.243544, -0.247323, -0.251081, -0.25476, -0.258249, -0.261573, -0.264897, -0.268256, -0.271611, -0.274955, -0.278297, -0.281663, -0.285029, -0.288285, -0.291414, -0.29449, -0.297552, -0.300617, -0.303686, -0.306754, -0.309816, -0.31288, -0.315962, -0.318961, -0.321696, -0.324266, -0.326872, -0.329511, -0.332137, -0.334747, -0.337364, -0.34003, -0.342651, -0.345031, -0.347153, -0.349093, -0.350975, -0.352885, -0.354804, -0.356714, -0.358628, -0.36054, -0.362434, -0.364361, -0.366372, -0.368414, -0.370439, -0.372463, -0.374491, -0.376504, -0.378532, -0.380612, -0.382585, -0.384231, -0.385406, -0.386147, -0.386805, -0.387553, -0.388313, -0.389042, -0.389749, -0.390517, -0.391352, -0.391881, -0.391923, -0.391812, -0.391735, -0.391659, -0.391574, -0.391491, -0.391409, -0.391325, -0.391244, -0.391172, -0.391119, -0.391085, -0.391053, -0.391014, -0.390966, -0.390943, -0.390941, -0.390817, -0.390692, -0.391147, -0.392278, -0.393689, -0.395169, -0.39664, -0.398089, -0.399534, -0.401033, -0.402526, -0.403828, -0.405983, -0.410837, -0.417396, -0.423596, -0.429428, -0.435371, -0.441602, -0.447749, -0.452886, -0.458938, -0.469853, -0.486053, -0.505961, -0.526948, -0.54729, -0.568028, -0.588776, -0.607133, -0.627845, -0.657227, -0.670039, -0.653019, -0.636029, -0.619027, -0.602023, -0.58502, -0.568016, -0.551011, -0.533998, -0.516866, -0.497111, -0.449862, -0.39999, -0.349999, -0.3, -0.25, -0.2, -0.15, -0.1, -0.05, 5.20417e-18]
    extrap_cm_old = (cm_re2E5,cm_re5E5,cm_re1E6)
    ND_corr3Dextr_maxerror_cm = 0.0

    #Plot the output and get the error
    extrap_cm =zeros(length(extrap_aoas),length(Re_airfoiltools))
    PyPlot.figure("Verify_cm")
    for i = 1:length(Re_airfoiltools) #length of the airfoiltools data
        for j = 1:length(extrap_aoas)
            vars = [extrap_aoas[j],Re_airfoiltools[i],0.0]
            extrap_cm[j,i] = AirfoilPrep.interpND(splout_extrap[3],vars)

        end

        PyPlot.plot(extrap_aoas,extrap_cm[:,i],label = "Re: $(Re_airfoiltools[i])")
        ND_corr3Dextr_maxerror_cm = max(ND_corr3Dextr_maxerror_cm,maximum(abs.(extrap_cm[:,i]-extrap_cm_old[i])))
    end
    PyPlot.xlabel("aoa (deg)")
    PyPlot.ylabel("cm")

    return ND_corr3Dextr_maxerror_cl,ND_corr3Dextr_maxerror_cd,ND_corr3Dextr_maxerror_cm
end

#------- RUN TESTS ------#
ERROR_TOL = 1E-4

NDSpl_maxerror_cl, NDSpl_maxerror_cd, NDSpl_maxerror_cm, NDtable = validateNDtools_from_Xfoil()
ND_corr3Dextr_maxerror_cl,ND_corr3Dextr_maxerror_cd,ND_corr3Dextr_maxerror_cm = verifyNDtable_extrap(NDtable)
correction3D_error_max = verify_correction3D_2()

@test correction3D_error_max <= ERROR_TOL
@test NDSpl_maxerror_cl <= ERROR_TOL
@test NDSpl_maxerror_cd <= ERROR_TOL
@test NDSpl_maxerror_cm <= ERROR_TOL
@test ND_corr3Dextr_maxerror_cl <= ERROR_TOL
@test ND_corr3Dextr_maxerror_cd <= ERROR_TOL
@test ND_corr3Dextr_maxerror_cm <= ERROR_TOL
println("Tests Passed")
