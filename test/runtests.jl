using AirfoilPrep
using Base.Test
using Xfoil

using CSV
using PyPlot


# Specify plotting options
rc("figure", figsize=(4.5, 2.6))
rc("font", size=10.0)
rc("lines", linewidth=1.5)
rc("lines", markersize=3.0)
rc("legend", frameon=false)
rc("axes.spines", right=false, top=false)
rc("figure.subplot", left=0.18, bottom=0.18, top=0.97, right=0.92)
rc("axes", color_cycle=["348ABD", "A60628", "009E73", "7A68A6", "D55E00", "CC79A7"])
color_cycle=["#348ABD", "#A60628", "#009E73", "#7A68A6", "#D55E00", "#CC79A7", "#000486","#700000","#006907","#4C0099"]

PyPlot.close("all")

modulepath,_ = splitdir(@__FILE__)
modulepath = modulepath*"/"

AP = AirfoilPrep

data_path = "data/"

#-------- TEST AIRFOILPREPY WRAPPER --------#
"Verify that 3D corrections (stall delay) to 2D airfoil
properties is done correctly. The stall delay is implemented in `airfoilprep.py`
as explained in Du, Z., & Selig, M. (1998), *A 3-D stall-delay model for
horizontal axis wind turbine performance prediction*, and is verified by
replicating the results Du reports in Fig. 5 over the FFA airfoil in 5WPX."
function verify_correction3D_2()
    Re = Int(0.5*10^5) # Reynolds number
    Vinf = 8.8     # (m/s) Wind speed
    RPM = 158
    D = 5.35        # (m) Rotor diameter
    TSR = (2*pi*RPM/60)*(D/2) / (Vinf)

    fig1 = figure("correction3D")
    title("FFA 5WPX airfoil lift coefficient")
    xlabel(L"Angle of attack $\alpha (^\circ)$")
    ylabel(L"$C_l$")
    grid(true, color="0.8", linestyle="--")

    # 2D curve
    data = CSV.read(modulepath*data_path*"FFA-2Dcalc.csv";
    header=["angle", "Cl"], datarow=1)
    plot(data[:,1], data[:,2], "-k", label="2D calculated")

    polar = AP.Polar(Re, data[:,1], data[:,2],
    zeros(data[:,1]), zeros(data[:,1]),
    Float64[], Float64[])

    # Hard code old solutions for error checking
    old_cl_cr_16 = [0.0299769, 0.0473358, 0.0641102, 0.0826366, 0.0996613, 0.116936, 0.132459, 0.149484, 0.166759, 0.183533, 0.199056, 0.216706, 0.23443, 0.2518, 0.266208, 0.283751, 0.304505, 0.328773, 0.350701, 0.369912, 0.390744, 0.411294, 0.429392, 0.447877, 0.465695, 0.485271, 0.500772, 0.517415, 0.542212, 0.565233, 0.583722, 0.599897, 0.619426, 0.634199, 0.653888, 0.673884, 0.695413, 0.716739, 0.744017, 0.772024, 0.798671, 0.823187, 0.847241, 0.873737, 0.886028, 0.884262, 0.878168, 0.873115, 0.866446, 0.860485, 0.848607, 0.838469, 0.826784, 0.815457, 0.804488, 0.794233, 0.783979, 0.772321, 0.760691, 0.750102, 0.759824, 0.773619, 0.785396]

    old_cl_cr_37 = [0.0337801, 0.0513294, 0.0677512, 0.0849978, 0.101537, 0.118195, 0.134027, 0.150567, 0.167224, 0.183646, 0.199479, 0.21546, 0.23513, 0.251588, 0.262161, 0.281975, 0.30213, 0.326092, 0.346911, 0.366866, 0.386748, 0.406807, 0.425557, 0.443637, 0.461402, 0.484257, 0.501784, 0.514734, 0.538474, 0.56623, 0.585163, 0.603007, 0.623283, 0.64132, 0.662523, 0.683871, 0.713161, 0.74411, 0.802981, 0.866457, 0.922474, 0.969816, 1.01609, 1.08993, 1.17158, 1.21422, 1.23692, 1.26182, 1.2851, 1.30616, 1.31761, 1.32563, 1.33206, 1.33866, 1.34542, 1.35253, 1.35963, 1.36693, 1.37509, 1.39523, 1.45718, 1.54739, 1.62453]
    old_cl = (old_cl_cr_16,old_cl_cr_37)

    correction3D_error_max = 0.0

    # 3D curves
    i = 1
    for (mrkr, style, c_over_r, r_over_R) in [
        ("^r","--r",16,55),("Pg","-.g",37,30)]
        data = CSV.read(modulepath*data_path*"FFA-3D0$c_over_r.csv";
        header=["angle", "Cl"], datarow=1)
        plot(data[:,1], data[:,2], mrkr,
        label="3D wind tunnel c/r=0.$c_over_r")

        newpolar = AP.correction3D(polar, r_over_R/100, c_over_r/100, TSR,
        alpha_linear_min=0, alpha_linear_max=7,
        alpha_max_corr=30)

        plot(AP.get_cl(newpolar)[1], AP.get_cl(newpolar)[2], style,
        label="3D-airfoilprep.py corrected c/r=0.$c_over_r")
        correction3D_error_max = max(correction3D_error_max,maximum(abs.(AP.get_cl(newpolar)[2]-old_cl[i])))
        i+=1
    end
    legend(loc="best")

    return correction3D_error_max
end


"Tests (but only verifies, since there is nothing to compare to) that the
extrapolation method from `airfoilprep.py` is being called correctly. This
method takes airfoil curves an extrapolates them all around 360 degrees.
NOTE: CDmax in that function is the drag coeff at alpha=90deg or
CDmax=1.11+0.18AR for a blade of aspect ratio AR<50."
function test_extrapolation(; alphas=[i for i in -10:1.0:20], iter=100,
    verbose=true)
    Re=1*10^5
    CDmax = 1.3

    Vinf = 10     # (m/s) Wind speed
    RPM = 72
    D = 10        # (m) Rotor diameter
    TSR = (2*pi*RPM/60)*(D/2) / (Vinf)
    r_over_R = 30
    c_over_r = 18

    data = CSV.read(modulepath*data_path*"FFA-2Dcalc.csv";
    header=["angle", "Cl"], datarow=1)

    polar = AP.Polar(Re, data[:,1], data[:,2],
    zeros(data[:,1]), zeros(data[:,1]),
    Float64[], Float64[])

    newpolar = AP.correction3D(polar, r_over_R/100, c_over_r/100, TSR,
    alpha_linear_min=0, alpha_linear_max=7,
    alpha_max_corr=30)

    # Extrapolated polar
    # extrap_polar1 = AP.extrapolate(newpolar, CDmax)
    extrap_polar = AP.extrapolate(polar, CDmax)

    # AP.plot(extrap_polar1; cdpolar=false)
    AP.plot(extrap_polar; cdpolar=false)

    return extrap_polar
end


"""#-------- TEST NDtools Automated Table Generation from Input Function --------#

#Use S809 NREL airfoil:
#1) Verify Cl, Cd, Cm with data from airfoiltool.com
"""
function validateNDtools_from_Xfoil()

    #--- Load in Airfoiltools.com S809 Data ---#
    S809_Re2E5 = CSV.read(modulepath*data_path*"xf-s809-nr-200000.csv";
    header=["alpha" ,"CL","CD","CDp","CM","Top_Xtr","Bot_Xtr"],delim = ",", datarow=13)

    S809_Re5E5 = CSV.read(modulepath*data_path*"xf-s809-nr-500000.csv";
    header=["alpha" ,"CL","CD","CDp","CM","Top_Xtr","Bot_Xtr"],delim = ",", datarow=13)

    S809_Re1E6 = CSV.read(modulepath*data_path*"xf-s809-nr-1000000.csv";
    header=["alpha" ,"CL","CD","CDp","CM","Top_Xtr","Bot_Xtr"],delim = ",", datarow=13)

    AirfoilToolsData = (S809_Re2E5,S809_Re5E5,S809_Re1E6)

    #Load in airfoil x and y points
    folder,_ = splitdir(@__FILE__)
    airfoil_file = joinpath(folder,"data","S809.txt")
    headerlines = 2
    open(airfoil_file,"r") do f
        global  x = Array{Float64,1}(0)
        global  y = Array{Float64,1}(0)
        for (i,line) in enumerate(eachline(f))
            if i>headerlines
                x = append!(x,parse(split(chomp(line))[1]))
                y = append!(y,parse(split(chomp(line))[2]))
            else
            end
        end
    end

    # Define operating conditions
    aoas = collect(linspace(-15,25,41))#linspace(-10,10,20)
    Res = [2E5,3E5,4E5,5E5,6E5,7E5,8E5,9E5,1E6]
    Ms = [0.0,0.01]

    #Wapper function for my analysis code: Xfoil for this test
    println("Running Xfoil as Airfoil Data generator")
    function f(Re,M)
        # Note that aoas is inherited for more efficient xfoil operation
        cls,cds,cdps,cms,convs =Xfoil.xfoilsweep(x,y,aoas,Re;iter=100,npan=140,mach=M,
        percussive_maintenance=true,printdata=true,zeroinit=true,clmaxstop=true,clminstop=true)

        return cls,cds+cdps,cms,convs
    end


    var_input = (aoas,Res,Ms)
    var_names = ["aoa","Re","M"]
    response_names = ["cl","cd","cm","convs"]

    #Since the version of Xfoil being used is more efficient if it handles the aoa sweep, we'll not generate a table with it yet.
    response_values = AirfoilPrep.genNDarray(f,response_names,var_input[2:end],var_names[2:end])

    # Reformat to get the ND array in the right format for my specific problem, ie
    # a table of responses lining up to aoa, re, mach
    cls = zeros(length(aoas),length(Res),length(Ms))
    cds = zeros(cls)
    cms = zeros(cls)
    convs = zeros(cls)

    for i = 1:length(aoas)
        for j = 1:length(Res)
            for k = 1:length(Ms)
                cls[i,j,k] = response_values[j,k][1][i]
                cds[i,j,k] = response_values[j,k][2][i]
                cms[i,j,k] = response_values[j,k][3][i]
                convs[i,j,k] = response_values[j,k][4][i]
            end
        end
    end

    #Put the response values into the format required by NDtools
    response_values2 = [cls,cds,cms,convs]
    NDtable = AirfoilPrep.TableND(response_values2,response_names,var_input,var_names)

    #Access the table example
    myindices = (1,1,1)
    cl = NDtable.response_values[1][myindices...] #Assumed cl to be first response

    # Spline the table
    #Warning, the airfoil data here has non-converged points and we'll filter them out later
    splout_non_extrap = AirfoilPrep.SplineND_from_tableND(NDtable)

    #Plot the results
    Re_airfoiltools = [2E5,5E5,1E6]
    aoas21 = []
    aoas2 = []
    XfoilData_cl1 =[]
    XfoilData_cl =[]
    vars = []
    for i = 1:length(Re_airfoiltools) #length of the airfoiltools data
        for j = 1:length(aoas)
            if NDtable.response_values[4][j,i,1]==true
                vars = (aoas[j],Re_airfoiltools[i],0.0)
                push!(XfoilData_cl1,AirfoilPrep.interpND(splout_non_extrap[1],vars))
                push!(aoas21,aoas[j])
            end
        end
        push!(XfoilData_cl,XfoilData_cl1)
        push!(aoas2,aoas21)
        XfoilData_cl1 =[]
        aoas21 = []
    end

    # Check the cl error from an original run
    NDSpl_maxerror_cl = 0.0
    OldXfoilData_s809_Re2E5 = [-0.473515, -0.648893, -0.528673, -0.492563, -0.357591, -0.209986, -0.110082, -0.0481071, 0.00891502, 0.113733, 0.17017, 0.235873, 0.327773, 0.41861, 0.527213, 0.633993, 0.746845, 0.87758, 0.977806, 0.954624, 0.926883]
    OldXfoilData_s809_Re5E5 = [-0.746883, -0.650123, -0.584852, -0.551076, -0.524587, -0.512261, -0.439827, -0.318644, -0.202955, -0.0871805, 0.0295255, 0.146385, 0.263179, 0.37841, 0.492835, 0.60978, 0.726073, 0.837511, 0.943375, 0.960604, 0.983048, 1.01456, 1.03991, 1.0668, 1.09374, 1.1144, 1.14403, 1.15379, 1.1609, 1.1431]
    OldXfoilData_s809_Re1E6 = [-0.809019, -0.867028, -0.75136, -0.688495, -0.653602, -0.622135, -0.57855, -0.519902, -0.448765, -0.327558, -0.208416, -0.0891631, 0.0295293, 0.148423, 0.267439, 0.386354, 0.50429, 0.621041, 0.736629, 0.851222, 0.914147, 0.97305, 1.02751, 1.07725, 1.12474, 1.17066, 1.20861, 1.23612, 1.2648, 1.29016, 1.29755, 1.31023]
    XfoilData_cl_old = (OldXfoilData_s809_Re2E5,OldXfoilData_s809_Re5E5,OldXfoilData_s809_Re1E6)

    #Plot the AirfoilTools Data vs the newly generated data and calculate the error
    PyPlot.figure("Verify_NDspline")
    for i = 1:length(Re_airfoiltools)
        PyPlot.plot(aoas2[i],XfoilData_cl[i],".-",color = color_cycle[i],label = "NDtools Re $(round(Int,Re_airfoiltools[i]))")
        PyPlot.plot(AirfoilToolsData[i][:,1],AirfoilToolsData[i][:,2],"--",color = color_cycle[i],label = "Aifoiltools.com Re $(round(Int,Re_airfoiltools[i]))")
        NDSpl_maxerror_cl = max(NDSpl_maxerror_cl,maximum(abs.(XfoilData_cl[i]-XfoilData_cl_old[i])))
    end
    PyPlot.xlabel("AOA")
    PyPlot.ylabel("cl")
    PyPlot.legend(loc = "best")

    return NDSpl_maxerror_cl,NDtable
end

"""#-------- TEST NDtools Integration with AirfoilPrep.py 3D correction and extrapolation--------#

#Use S809 NREL airfoil data from previous test:
#2) Verify 3d correction
#3) Verify extrapolation
"""
function verifyNDtable_extrap(NDtable)
    # Test airfoilpreppy on the ND table
    r_over_R = 0.1
    c_over_r = 0.3
    TSR = 10.0
    grid_alphas=[i for i in -180:1.0:180]

    # Includes convergence checking for airfoil data

    NDextrap3D_3Dtable = AirfoilPrep.NDTable_correction3D_extrap(NDtable,r_over_R,c_over_r,TSR;grid_alphas=grid_alphas)

    # Spline the new table
    splout_extrap = AirfoilPrep.SplineND_from_tableND(NDextrap3D_3Dtable)


    #Plot the output and get the error
    Re_airfoiltools = [2E5,5E5,1E6]
    aoas = collect(linspace(-15,25,41))#linspace(-10,10,20)
    extrap_aoas = grid_alphas
    vars = []

    #Verify cl
    cl_re2E5 = [3.46945e-18, 0.0670194, 0.134039, 0.201058, 0.268077, 0.335097, 0.402116, 0.469136, 0.536155, 0.603173, 0.670194, 0.667008, 0.610404, 0.579705, 0.571402, 0.561964, 0.550285, 0.541981, 0.537005, 0.533291, 0.530375, 0.528481, 0.527489, 0.527109, 0.527179, 0.527615, 0.528326, 0.529216, 0.530207, 0.531234, 0.532241, 0.533175, 0.533991, 0.534647, 0.535109, 0.535344, 0.535322, 0.535019, 0.534411, 0.533477, 0.532199, 0.530561, 0.528549, 0.52615, 0.523353, 0.520148, 0.516528, 0.512486, 0.508016, 0.503116, 0.497781, 0.492009, 0.485801, 0.479156, 0.472076, 0.464563, 0.456619, 0.44825, 0.439459, 0.430253, 0.420638, 0.410621, 0.400211, 0.389415, 0.378244, 0.366707, 0.354815, 0.34258, 0.330014, 0.317129, 0.303938, 0.290454, 0.276693, 0.262668, 0.248395, 0.233889, 0.219167, 0.204244, 0.189137, 0.173863, 0.15844, 0.142886, 0.127217, 0.111453, 0.0956121, 0.0797132, 0.0637729, 0.0478102, 0.0318519, 0.0159179, 5.46438e-17, -0.0159169, -0.0318509, -0.0478107, -0.0637735, -0.079713, -0.0956119, -0.111453, -0.127217, -0.142886, -0.15844, -0.173863, -0.189137, -0.204244, -0.219167, -0.233889, -0.248395, -0.262668, -0.276693, -0.290454, -0.303938, -0.317129, -0.330014, -0.34258, -0.354815, -0.366707, -0.378244, -0.389415, -0.400211, -0.410621, -0.420638, -0.430253, -0.439459, -0.44825, -0.456619, -0.464563, -0.472076, -0.479156, -0.485801, -0.492009, -0.497781, -0.503116, -0.508017, -0.512486, -0.516528, -0.520148, -0.523353, -0.52615, -0.528549, -0.530561, -0.532199, -0.533477, -0.534411, -0.535019, -0.535322, -0.535344, -0.535109, -0.534647, -0.533991, -0.533177, -0.532238, -0.531227, -0.530221, -0.529242, -0.528266, -0.52753, -0.527439, -0.527384, -0.526394, -0.527656, -0.534877, -0.535461, -0.518805, -0.537924, -0.646648, -0.776733, -0.842192, -0.839711, -0.786647, -0.700358, -0.598201, -0.50511, -0.4431, -0.344558, -0.241349, -0.155765, -0.0841971, -0.0144592, 0.07294, 0.136279, 0.191129, 0.264074, 0.3467, 0.428933, 0.517731, 0.605855, 0.696223, 0.793199, 0.878902, 0.919003, 0.95742, 0.930511, 0.871035, 0.83428, 0.816828, 0.801134, 0.785898, 0.774712, 0.767232, 0.761723, 0.75765, 0.755005, 0.753565, 0.753004, 0.753109, 0.753738, 0.754753, 0.756023, 0.757438, 0.758906, 0.760344, 0.761679, 0.762844, 0.763782, 0.764442, 0.764777, 0.764746, 0.764313, 0.763444, 0.76211, 0.760284, 0.757945, 0.75507, 0.751643, 0.747646, 0.743068, 0.737897, 0.732123, 0.725738, 0.718737, 0.711115, 0.702871, 0.694002, 0.684509, 0.674395, 0.663661, 0.652313, 0.640357, 0.627799, 0.614647, 0.600912, 0.586602, 0.571729, 0.556307, 0.540348, 0.523867, 0.506879, 0.489401, 0.471449, 0.453041, 0.434197, 0.414935, 0.395276, 0.37524, 0.35485, 0.334128, 0.313095, 0.291776, 0.270196, 0.248378, 0.226342, 0.204116, 0.181743, 0.159241, 0.136578, 0.113792, 0.0911313, 0.0686084, 0.045454, 0.0216163, 8.10983e-17, -0.0170424, -0.0319008, -0.0475019, -0.0637458, -0.0797973, -0.0956234, -0.11143, -0.127213, -0.142892, -0.158442, -0.173862, -0.189136, -0.204244, -0.219167, -0.233889, -0.248395, -0.262668, -0.276693, -0.290454, -0.303938, -0.317129, -0.330014, -0.34258, -0.354815, -0.366707, -0.378244, -0.389415, -0.400211, -0.410621, -0.420638, -0.430253, -0.439459, -0.44825, -0.456619, -0.464563, -0.472076, -0.479156, -0.485801, -0.492009, -0.497781, -0.503116, -0.508016, -0.512486, -0.516528, -0.520148, -0.523353, -0.52615, -0.528549, -0.530561, -0.532199, -0.533477, -0.534411, -0.535019, -0.535322, -0.535344, -0.535109, -0.534647, -0.533991, -0.533175, -0.532241, -0.531234, -0.530207, -0.529216, -0.528326, -0.527615, -0.527179, -0.527109, -0.527489, -0.528481, -0.530375, -0.533291, -0.537005, -0.541981, -0.550285, -0.561964, -0.571402, -0.579705, -0.610404, -0.667008, -0.670194, -0.603173, -0.536155, -0.469136, -0.402116, -0.335097, -0.268077, -0.201058, -0.134039, -0.0670194, 1.73472e-18]

    cl_re5E5 = [1.73472e-18, 0.0603788, 0.120758, 0.181136, 0.241515, 0.301894, 0.362273, 0.422651, 0.48303, 0.543409, 0.603788, 0.664167, 0.724545, 0.784924, 0.845303, 0.905682, 0.966061, 1.02644, 1.08685, 1.1472, 1.12957, 1.06913, 1.03594, 1.01348, 0.986934, 0.96179, 0.940284, 0.9204, 0.901569, 0.884052, 0.867683, 0.8522, 0.837486, 0.823446, 0.809969, 0.796958, 0.784334, 0.772024, 0.759962, 0.74809, 0.736356, 0.724712, 0.713118, 0.701536, 0.689931, 0.678276, 0.666542, 0.654706, 0.642749, 0.630651, 0.618396, 0.605972, 0.593367, 0.580571, 0.567576, 0.554376, 0.540967, 0.527345, 0.513509, 0.499458, 0.485193, 0.470717, 0.456033, 0.441144, 0.426057, 0.410777, 0.395312, 0.37967, 0.36386, 0.347892, 0.331776, 0.315523, 0.299146, 0.282658, 0.26607, 0.249398, 0.232655, 0.215858, 0.19902, 0.182157, 0.165287, 0.148426, 0.131591, 0.114799, 0.0980683, 0.0814188, 0.0648658, 0.0484206, 0.03212, 0.0160027, 5.50775e-17, -0.0160027, -0.03212, -0.0484206, -0.0648658, -0.0814188, -0.0980683, -0.114799, -0.131591, -0.148426, -0.165287, -0.182157, -0.19902, -0.215858, -0.232655, -0.249398, -0.26607, -0.282658, -0.299146, -0.315523, -0.331776, -0.347892, -0.36386, -0.37967, -0.395312, -0.410777, -0.426057, -0.441144, -0.456033, -0.470717, -0.485193, -0.499458, -0.513509, -0.527345, -0.540967, -0.554376, -0.567576, -0.580571, -0.593367, -0.605972, -0.618396, -0.630651, -0.642749, -0.654706, -0.666542, -0.678276, -0.689931, -0.701536, -0.713118, -0.724712, -0.736356, -0.74809, -0.759962, -0.772024, -0.784334, -0.796958, -0.809968, -0.823446, -0.837487, -0.852197, -0.867682, -0.884064, -0.901565, -0.92035, -0.940338, -0.961967, -0.986588, -1.01294, -1.03775, -1.07038, -1.12125, -1.1472, -1.13604, -1.12487, -1.11371, -1.10255, -1.08661, -1.05592, -1.00167, -0.915085, -0.803031, -0.716465, -0.648185, -0.584136, -0.528312, -0.437586, -0.318553, -0.202711, -0.0868184, 0.0296146, 0.146137, 0.262621, 0.378198, 0.493306, 0.609878, 0.726071, 0.839445, 0.949583, 1.00825, 1.06995, 1.13692, 1.2003, 1.26459, 1.3289, 1.38956, 1.45543, 1.50976, 1.56257, 1.6009, 1.63885, 1.59993, 1.52938, 1.4829, 1.44693, 1.40933, 1.37428, 1.34335, 1.31478, 1.28795, 1.26295, 1.23955, 1.21742, 1.19641, 1.17635, 1.1571, 1.13851, 1.12048, 1.10289, 1.08566, 1.0687, 1.05194, 1.0353, 1.01874, 1.00219, 0.985616, 0.968965, 0.952202, 0.935295, 0.918212, 0.900929, 0.883423, 0.865675, 0.847667, 0.829387, 0.810823, 0.791966, 0.77281, 0.75335, 0.733584, 0.713511, 0.693133, 0.672453, 0.651475, 0.630206, 0.608652, 0.586824, 0.564731, 0.542386, 0.5198, 0.496988, 0.473965, 0.450747, 0.427352, 0.403797, 0.3801, 0.356283, 0.332365, 0.308368, 0.284313, 0.260225, 0.236126, 0.212037, 0.187982, 0.164005, 0.140117, 0.116274, 0.0926048, 0.0693727, 0.0460234, 0.021938, 8.10983e-17, -0.0169256, -0.0319822, -0.0482202, -0.0649264, -0.0814572, -0.0980487, -0.114793, -0.131597, -0.148427, -0.165286, -0.182157, -0.19902, -0.215857, -0.232655, -0.249398, -0.26607, -0.282658, -0.299146, -0.315523, -0.331776, -0.347892, -0.36386, -0.37967, -0.395312, -0.410777, -0.426057, -0.441144, -0.456033, -0.470717, -0.485193, -0.499458, -0.513509, -0.527345, -0.540967, -0.554376, -0.567576, -0.580571, -0.593367, -0.605972, -0.618396, -0.630651, -0.642749, -0.654706, -0.666542, -0.678276, -0.689931, -0.701536, -0.713118, -0.724712, -0.736356, -0.74809, -0.759962, -0.772024, -0.784334, -0.796958, -0.809969, -0.823446, -0.837486, -0.8522, -0.867683, -0.884052, -0.901569, -0.9204, -0.940284, -0.96179, -0.986934, -1.01348, -1.03594, -1.06913, -1.12957, -1.1472, -1.08685, -1.02644, -0.966061, -0.905682, -0.845303, -0.784924, -0.724545, -0.664167, -0.603788, -0.543409, -0.48303, -0.422651, -0.362273, -0.301894, -0.241515, -0.181136, -0.120758, -0.0603788, -1.73472e-18]

    cl_re1E6 = [-1.73472e-18, 0.0625463, 0.125093, 0.187639, 0.250185, 0.312731, 0.375278, 0.437824, 0.50037, 0.562916, 0.625463, 0.688009, 0.750555, 0.813101, 0.875648, 0.938194, 1.00074, 1.06329, 1.12583, 1.18833, 1.25093, 1.22961, 1.16422, 1.12777, 1.10147, 1.07086, 1.04217, 1.0172, 0.993813, 0.971619, 0.950868, 0.931343, 0.912787, 0.895092, 0.878156, 0.861861, 0.846111, 0.830821, 0.815918, 0.801333, 0.787004, 0.772879, 0.758907, 0.745047, 0.731257, 0.717505, 0.703758, 0.689989, 0.676174, 0.66229, 0.64832, 0.634245, 0.620053, 0.605731, 0.591268, 0.576658, 0.561892, 0.546967, 0.531879, 0.516627, 0.501209, 0.485626, 0.469881, 0.453977, 0.437919, 0.42171, 0.405359, 0.388871, 0.372257, 0.355524, 0.338682, 0.321743, 0.304717, 0.287617, 0.270455, 0.253245, 0.236002, 0.218739, 0.201471, 0.184215, 0.166986, 0.149801, 0.132676, 0.115629, 0.0986777, 0.0818417, 0.0651368, 0.0485724, 0.0321864, 0.0160231, 5.46438e-17, -0.0160231, -0.0321864, -0.0485724, -0.0651368, -0.0818417, -0.0986777, -0.115629, -0.132676, -0.149801, -0.166986, -0.184215, -0.201471, -0.218739, -0.236002, -0.253245, -0.270455, -0.287617, -0.304717, -0.321743, -0.338682, -0.355524, -0.372257, -0.388871, -0.405359, -0.42171, -0.437919, -0.453977, -0.469881, -0.485626, -0.501209, -0.516627, -0.531879, -0.546967, -0.561892, -0.576658, -0.591268, -0.605731, -0.620053, -0.634245, -0.64832, -0.66229, -0.676174, -0.689989, -0.703758, -0.717505, -0.731257, -0.745047, -0.758907, -0.772879, -0.787004, -0.801333, -0.815918, -0.830821, -0.84611, -0.861861, -0.878156, -0.895093, -0.912785, -0.931341, -0.950876, -0.97162, -0.993779, -1.01722, -1.0423, -1.07066, -1.10105, -1.12896, -1.1652, -1.22382, -1.25093, -1.22968, -1.20843, -1.18718, -1.16593, -1.14468, -1.13013, -1.08258, -1.00482, -0.916104, -0.830466, -0.761279, -0.694106, -0.619807, -0.536649, -0.446147, -0.326199, -0.207465, -0.0886667, 0.0298024, 0.14839, 0.267049, 0.385649, 0.503673, 0.621001, 0.737644, 0.853703, 0.939376, 1.02268, 1.10338, 1.18129, 1.25789, 1.33356, 1.40455, 1.4694, 1.53639, 1.59851, 1.65152, 1.70765, 1.75016, 1.78704, 1.74229, 1.6656, 1.61404, 1.57249, 1.5293, 1.48913, 1.4532, 1.41965, 1.38803, 1.3584, 1.33049, 1.30398, 1.2787, 1.25451, 1.23123, 1.20873, 1.18689, 1.1656, 1.14476, 1.12429, 1.10411, 1.08415, 1.06435, 1.04465, 1.02501, 1.00537, 0.985699, 0.965963, 0.946129, 0.926171, 0.906064, 0.88579, 0.865329, 0.844669, 0.823797, 0.802703, 0.781382, 0.759828, 0.738038, 0.716013, 0.693752, 0.671259, 0.648539, 0.625598, 0.602443, 0.579084, 0.555531, 0.531795, 0.507891, 0.483831, 0.459632, 0.43531, 0.410881, 0.386364, 0.361779, 0.337146, 0.312484, 0.287816, 0.263164, 0.238553, 0.214001, 0.189532, 0.165189, 0.140988, 0.116885, 0.0929877, 0.0695741, 0.0461335, 0.021991, 7.76289e-17, -0.0169222, -0.0320335, -0.0483874, -0.0652017, -0.0818733, -0.0986577, -0.115626, -0.132682, -0.149801, -0.166985, -0.184215, -0.201472, -0.218739, -0.236002, -0.253246, -0.270455, -0.287617, -0.304717, -0.321743, -0.338682, -0.355524, -0.372257, -0.388871, -0.405359, -0.42171, -0.437919, -0.453977, -0.469881, -0.485626, -0.501209, -0.516627, -0.531879, -0.546967, -0.561892, -0.576658, -0.591268, -0.605731, -0.620053, -0.634245, -0.64832, -0.66229, -0.676174, -0.689989, -0.703758, -0.717505, -0.731257, -0.745047, -0.758907, -0.772879, -0.787004, -0.801333, -0.815918, -0.830821, -0.846111, -0.861861, -0.878156, -0.895092, -0.912787, -0.931343, -0.950868, -0.971619, -0.993813, -1.0172, -1.04217, -1.07086, -1.10147, -1.12777, -1.16422, -1.22961, -1.25093, -1.18833, -1.12583, -1.06329, -1.00074, -0.938194, -0.875648, -0.813101, -0.750555, -0.688009, -0.625463, -0.562916, -0.50037, -0.437824, -0.375278, -0.312731, -0.250185, -0.187639, -0.125093, -0.0625463, 1.73472e-18]

    extrap_cl_old = (cl_re2E5,cl_re5E5,cl_re1E6)
    ND_corr3Dextr_maxerror_cl = 0.0

    #Plot the output and get the error
    extrap_cl =zeros(length(extrap_aoas),length(Re_airfoiltools))
    PyPlot.figure("Verify_cl")
    for i = 1:length(Re_airfoiltools) #length of the airfoiltools data
        for j = 1:length(extrap_aoas)
            vars = (extrap_aoas[j],Re_airfoiltools[i],0.0)
            extrap_cl[j,i] = AirfoilPrep.interpND(splout_extrap[1],vars)

        end
        PyPlot.plot(extrap_aoas,extrap_cl[:,i],label = "Re: $(Re_airfoiltools[i])")

        ND_corr3Dextr_maxerror_cl = max(ND_corr3Dextr_maxerror_cl,maximum(abs.(extrap_cl[:,i]-extrap_cl_old[i])))
    end
    PyPlot.xlabel("aoa (deg)")
    PyPlot.ylabel("cl")

    # Verify cd
    cd_re2E5 = [0.0285292, 0.0285292, 0.0285292, 0.0285292, 0.0285292, 0.0285292, 0.0285257, 0.0304642, 0.0362855, 0.0428899, 0.0502441, 0.0583392, 0.067165, 0.0767111, 0.0869656, 0.0979161, 0.109549, 0.12185, 0.134805, 0.148397, 0.162609, 0.177426, 0.192827, 0.208795, 0.22531, 0.242352, 0.2599, 0.277932, 0.296427, 0.315361, 0.334712, 0.354456, 0.374569, 0.395027, 0.415803, 0.436873, 0.458212, 0.479792, 0.501588, 0.523573, 0.54572, 0.568001, 0.590391, 0.61286, 0.635382, 0.65793, 0.680475, 0.70299, 0.725448, 0.74782, 0.77008, 0.7922, 0.814154, 0.835913, 0.857453, 0.878746, 0.899765, 0.920487, 0.940884, 0.960932, 0.980607, 0.999884, 1.01874, 1.03715, 1.0551, 1.07255, 1.0895, 1.10591, 1.12177, 1.13706, 1.15176, 1.16586, 1.17933, 1.19215, 1.20432, 1.21582, 1.22663, 1.23674, 1.24614, 1.25481, 1.26275, 1.26994, 1.27638, 1.28206, 1.28697, 1.2911, 1.29446, 1.29704, 1.29881, 1.29973, 1.3, 1.29974, 1.29881, 1.29704, 1.29445, 1.2911, 1.28697, 1.28206, 1.27638, 1.26994, 1.26275, 1.25481, 1.24614, 1.23674, 1.22663, 1.21582, 1.20432, 1.19215, 1.17933, 1.16586, 1.15176, 1.13706, 1.12177, 1.10591, 1.0895, 1.07255, 1.0551, 1.03715, 1.01874, 0.999884, 0.980607, 0.960932, 0.940884, 0.920487, 0.899765, 0.878746, 0.857453, 0.835913, 0.814154, 0.7922, 0.77008, 0.74782, 0.725448, 0.70299, 0.680475, 0.65793, 0.635382, 0.61286, 0.590391, 0.568001, 0.54572, 0.523573, 0.501588, 0.479792, 0.458212, 0.436874, 0.415803, 0.395026, 0.37457, 0.354458, 0.334709, 0.315355, 0.296439, 0.277955, 0.259846, 0.242275, 0.225541, 0.209046, 0.191863, 0.176667, 0.166566, 0.150434, 0.118852, 0.11776, 0.192331, 0.274051, 0.281898, 0.22786, 0.147183, 0.0751101, 0.0468871, 0.0619203, 0.0470316, 0.0976325, 0.115294, 0.111347, 0.101268, 0.0920078, 0.0898305, 0.0758259, 0.0575397, 0.0490151, 0.0505682, 0.0495758, 0.0506084, 0.0496415, 0.0449395, 0.0358309, 0.0285292, 0.0306674, 0.0502441, 0.0619094, 0.0673201, 0.0757322, 0.0868795, 0.0981829, 0.109585, 0.121778, 0.134792, 0.148416, 0.162614, 0.17742, 0.192826, 0.208797, 0.225311, 0.242352, 0.2599, 0.277932, 0.296427, 0.315361, 0.334712, 0.354456, 0.374569, 0.395027, 0.415803, 0.436873, 0.458212, 0.479792, 0.501588, 0.523573, 0.54572, 0.568001, 0.590391, 0.61286, 0.635382, 0.65793, 0.680475, 0.70299, 0.725448, 0.74782, 0.77008, 0.7922, 0.814154, 0.835913, 0.857453, 0.878746, 0.899765, 0.920487, 0.940884, 0.960932, 0.980607, 0.999884, 1.01874, 1.03715, 1.0551, 1.07255, 1.0895, 1.10591, 1.12177, 1.13706, 1.15176, 1.16586, 1.17933, 1.19215, 1.20432, 1.21582, 1.22663, 1.23674, 1.24614, 1.25481, 1.26275, 1.26994, 1.27638, 1.28206, 1.28697, 1.2911, 1.29446, 1.29704, 1.29881, 1.29974, 1.3, 1.29974, 1.29881, 1.29704, 1.29446, 1.2911, 1.28697, 1.28206, 1.27638, 1.26994, 1.26275, 1.25481, 1.24614, 1.23674, 1.22663, 1.21582, 1.20432, 1.19215, 1.17933, 1.16586, 1.15176, 1.13706, 1.12177, 1.10591, 1.0895, 1.07255, 1.0551, 1.03715, 1.01874, 0.999884, 0.980607, 0.960932, 0.940884, 0.920487, 0.899765, 0.878746, 0.857453, 0.835913, 0.814154, 0.7922, 0.77008, 0.74782, 0.725448, 0.70299, 0.680475, 0.65793, 0.635382, 0.61286, 0.590391, 0.568001, 0.54572, 0.523573, 0.501588, 0.479792, 0.458212, 0.436873, 0.415803, 0.395027, 0.374569, 0.354456, 0.334712, 0.315361, 0.296427, 0.277932, 0.2599, 0.242352, 0.22531, 0.208795, 0.192827, 0.177426, 0.162609, 0.148397, 0.134805, 0.12185, 0.109549, 0.0979161, 0.0869656, 0.0767111, 0.067165, 0.0583392, 0.0502441, 0.0428899, 0.0362855, 0.0304642, 0.0285257, 0.0285292, 0.0285292, 0.0285292, 0.0285292, 0.0285292, 0.0285292]

    cd_re5E5 = [0.187313, 0.18768, 0.188782, 0.190617, 0.193182, 0.196475, 0.200491, 0.205224, 0.21067, 0.21682, 0.223667, 0.231202, 0.239415, 0.248296, 0.257833, 0.268014, 0.278825, 0.290254, 0.302284, 0.314901, 0.328087, 0.341827, 0.356102, 0.370894, 0.386184, 0.401951, 0.418176, 0.434836, 0.451912, 0.46938, 0.487218, 0.505402, 0.523909, 0.542715, 0.561795, 0.581124, 0.600678, 0.62043, 0.640355, 0.660427, 0.680619, 0.700904, 0.721257, 0.74165, 0.762057, 0.78245, 0.802803, 0.823089, 0.84328, 0.863351, 0.883274, 0.903022, 0.92257, 0.941892, 0.960961, 0.979751, 0.998238, 1.0164, 1.0342, 1.05163, 1.06866, 1.08526, 1.10141, 1.1171, 1.13229, 1.14697, 1.16112, 1.17472, 1.18774, 1.20017, 1.21199, 1.22319, 1.23374, 1.24364, 1.25286, 1.2614, 1.26923, 1.27635, 1.28275, 1.28841, 1.29333, 1.29749, 1.30088, 1.30353, 1.30539, 1.30641, 1.30668, 1.30643, 1.30509, 1.30199, 1.3, 1.30199, 1.30509, 1.30643, 1.30668, 1.30641, 1.30539, 1.30353, 1.30088, 1.29749, 1.29333, 1.28841, 1.28275, 1.27635, 1.26923, 1.2614, 1.25286, 1.24364, 1.23374, 1.22319, 1.21199, 1.20017, 1.18774, 1.17472, 1.16112, 1.14697, 1.13229, 1.1171, 1.10141, 1.08526, 1.06866, 1.05163, 1.0342, 1.0164, 0.998238, 0.979751, 0.960961, 0.941892, 0.92257, 0.903022, 0.883274, 0.863351, 0.84328, 0.823089, 0.802803, 0.78245, 0.762057, 0.74165, 0.721257, 0.700904, 0.680619, 0.660427, 0.640355, 0.62043, 0.600678, 0.581124, 0.561795, 0.542715, 0.523909, 0.505401, 0.487217, 0.469385, 0.45191, 0.434817, 0.418197, 0.402022, 0.386044, 0.370674, 0.35683, 0.342327, 0.324738, 0.314901, 0.315144, 0.315388, 0.315631, 0.315875, 0.284848, 0.219608, 0.151536, 0.112016, 0.111767, 0.0989186, 0.0777171, 0.0550767, 0.0281023, 0.0176799, 0.0216981, 0.0206422, 0.0197609, 0.0198358, 0.0200028, 0.0201636, 0.0204427, 0.0207695, 0.0203334, 0.0186523, 0.0163912, 0.0141095, 0.0210622, 0.0302374, 0.043462, 0.0599019, 0.0772448, 0.0963039, 0.119061, 0.142842, 0.174146, 0.21032, 0.258652, 0.314901, 0.335882, 0.340664, 0.35441, 0.371406, 0.386508, 0.401786, 0.418125, 0.434883, 0.451916, 0.469368, 0.487218, 0.505404, 0.523908, 0.542714, 0.561795, 0.581125, 0.600678, 0.62043, 0.640355, 0.660427, 0.680619, 0.700904, 0.721257, 0.74165, 0.762057, 0.78245, 0.802803, 0.823089, 0.84328, 0.863351, 0.883274, 0.903022, 0.92257, 0.941892, 0.960961, 0.979751, 0.998238, 1.0164, 1.0342, 1.05163, 1.06866, 1.08526, 1.10141, 1.1171, 1.13229, 1.14697, 1.16112, 1.17472, 1.18774, 1.20017, 1.21199, 1.22319, 1.23374, 1.24364, 1.25286, 1.2614, 1.26923, 1.27635, 1.28275, 1.28841, 1.29333, 1.29749, 1.30088, 1.30353, 1.30539, 1.30641, 1.30668, 1.30643, 1.30509, 1.30199, 1.3, 1.30199, 1.30509, 1.30643, 1.30668, 1.30641, 1.30539, 1.30353, 1.30088, 1.29749, 1.29333, 1.28841, 1.28275, 1.27635, 1.26923, 1.2614, 1.25286, 1.24364, 1.23374, 1.22319, 1.21199, 1.20017, 1.18774, 1.17472, 1.16112, 1.14697, 1.13229, 1.1171, 1.10141, 1.08526, 1.06866, 1.05163, 1.0342, 1.0164, 0.998238, 0.979751, 0.960961, 0.941892, 0.92257, 0.903022, 0.883274, 0.863351, 0.84328, 0.823089, 0.802803, 0.78245, 0.762057, 0.74165, 0.721257, 0.700904, 0.680619, 0.660427, 0.640355, 0.62043, 0.600678, 0.581124, 0.561795, 0.542715, 0.523909, 0.505402, 0.487218, 0.46938, 0.451912, 0.434836, 0.418176, 0.401951, 0.386184, 0.370894, 0.356102, 0.341827, 0.328087, 0.314901, 0.302284, 0.290254, 0.278825, 0.268014, 0.257833, 0.248296, 0.239415, 0.231202, 0.223667, 0.21682, 0.21067, 0.205224, 0.200491, 0.196475, 0.193182, 0.190617, 0.188782, 0.18768, 0.187313]

    cd_re1E6 = [0.162686, 0.163058, 0.164171, 0.166024, 0.168616, 0.171942, 0.175999, 0.180781, 0.186283, 0.192497, 0.199415, 0.207028, 0.215327, 0.224301, 0.233938, 0.244226, 0.255153, 0.266703, 0.278863, 0.291616, 0.304946, 0.318837, 0.333269, 0.348226, 0.363686, 0.379632, 0.396042, 0.412894, 0.430168, 0.447841, 0.465891, 0.484293, 0.503025, 0.522061, 0.541379, 0.560952, 0.580755, 0.600763, 0.620949, 0.641288, 0.661754, 0.682318, 0.702956, 0.72364, 0.744342, 0.765037, 0.785696, 0.806294, 0.826802, 0.847194, 0.867444, 0.887524, 0.907409, 0.927071, 0.946486, 0.965626, 0.984467, 1.00298, 1.02115, 1.03895, 1.05634, 1.07332, 1.08985, 1.10592, 1.1215, 1.13657, 1.15111, 1.16509, 1.17851, 1.19135, 1.20357, 1.21517, 1.22613, 1.23644, 1.24607, 1.25502, 1.26327, 1.27081, 1.27763, 1.28371, 1.28905, 1.29364, 1.29746, 1.30052, 1.30282, 1.30428, 1.30497, 1.30511, 1.30422, 1.3017, 1.3, 1.3017, 1.30422, 1.30511, 1.30497, 1.30428, 1.30282, 1.30052, 1.29746, 1.29364, 1.28905, 1.28371, 1.27763, 1.27081, 1.26327, 1.25502, 1.24607, 1.23644, 1.22613, 1.21517, 1.20357, 1.19135, 1.17851, 1.16509, 1.15111, 1.13657, 1.1215, 1.10592, 1.08985, 1.07332, 1.05634, 1.03895, 1.02115, 1.00298, 0.984467, 0.965626, 0.946486, 0.927071, 0.907409, 0.887524, 0.867444, 0.847194, 0.826802, 0.806294, 0.785696, 0.765037, 0.744342, 0.72364, 0.702956, 0.682318, 0.661754, 0.641288, 0.620949, 0.600763, 0.580755, 0.560952, 0.541379, 0.522062, 0.503024, 0.484292, 0.465894, 0.447841, 0.430154, 0.412904, 0.396094, 0.379549, 0.363517, 0.348709, 0.333669, 0.316487, 0.304946, 0.300954, 0.296962, 0.29297, 0.288978, 0.284986, 0.212921, 0.15621, 0.133831, 0.120452, 0.104877, 0.0833002, 0.0609136, 0.0419864, 0.0253476, 0.00964882, 0.0116164, 0.0116548, 0.0117094, 0.011608, 0.011752, 0.01203, 0.0122125, 0.012442, 0.011347, 0.0105637, 0.00974144, 0.0140609, 0.019064, 0.0248918, 0.0338929, 0.0462112, 0.0599108, 0.0759348, 0.0952999, 0.115994, 0.141281, 0.173171, 0.20671, 0.251513, 0.304946, 0.325824, 0.332081, 0.346788, 0.364191, 0.379878, 0.395886, 0.412866, 0.430209, 0.44784, 0.465881, 0.484295, 0.503027, 0.522061, 0.541378, 0.560952, 0.580755, 0.600763, 0.620949, 0.641288, 0.661754, 0.682318, 0.702956, 0.72364, 0.744342, 0.765037, 0.785696, 0.806294, 0.826802, 0.847194, 0.867444, 0.887524, 0.907409, 0.927071, 0.946486, 0.965626, 0.984467, 1.00298, 1.02115, 1.03895, 1.05634, 1.07332, 1.08985, 1.10592, 1.1215, 1.13657, 1.15111, 1.16509, 1.17851, 1.19135, 1.20357, 1.21517, 1.22613, 1.23644, 1.24607, 1.25502, 1.26327, 1.27081, 1.27763, 1.28371, 1.28905, 1.29364, 1.29746, 1.30052, 1.30282, 1.30428, 1.30497, 1.30511, 1.30422, 1.3017, 1.3, 1.3017, 1.30422, 1.30511, 1.30497, 1.30428, 1.30282, 1.30052, 1.29746, 1.29364, 1.28905, 1.28371, 1.27763, 1.27081, 1.26327, 1.25502, 1.24607, 1.23644, 1.22613, 1.21517, 1.20357, 1.19135, 1.17851, 1.16509, 1.15111, 1.13657, 1.1215, 1.10592, 1.08985, 1.07332, 1.05634, 1.03895, 1.02115, 1.00298, 0.984467, 0.965626, 0.946486, 0.927071, 0.907409, 0.887524, 0.867444, 0.847194, 0.826802, 0.806294, 0.785696, 0.765037, 0.744342, 0.72364, 0.702956, 0.682318, 0.661754, 0.641288, 0.620949, 0.600763, 0.580755, 0.560952, 0.541379, 0.522061, 0.503025, 0.484293, 0.465891, 0.447841, 0.430168, 0.412894, 0.396042, 0.379632, 0.363686, 0.348226, 0.333269, 0.318837, 0.304946, 0.291616, 0.278863, 0.266703, 0.255153, 0.244226, 0.233938, 0.224301, 0.215327, 0.207028, 0.199415, 0.192497, 0.186283, 0.180781, 0.175999, 0.171942, 0.168616, 0.166024, 0.164171, 0.163058, 0.162686]


    extrap_cd_old = (cd_re2E5,cd_re5E5,cd_re1E6)
    ND_corr3Dextr_maxerror_cd = 0.0

    #Plot the output and get the error
    extrap_cd =zeros(length(extrap_aoas),length(Re_airfoiltools))
    PyPlot.figure("Verify_cd")
    for i = 1:length(Re_airfoiltools) #length of the airfoiltools data
        for j = 1:length(extrap_aoas)
            vars = (extrap_aoas[j],Re_airfoiltools[i],0.0)
            extrap_cd[j,i] = AirfoilPrep.interpND(splout_extrap[2],vars)

        end
        PyPlot.plot(extrap_aoas,extrap_cd[:,i],label = "Re: $(Re_airfoiltools[i])")
        ND_corr3Dextr_maxerror_cd = max(ND_corr3Dextr_maxerror_cd,maximum(abs.(extrap_cd[:,i]-extrap_cd_old[i])))
    end
    PyPlot.xlabel("aoa (deg)")
    PyPlot.ylabel("cd")

    #Verify cm
    cm_re2E5 = [0.0, 0.04, 0.08, 0.12, 0.16, 0.2, 0.24, 0.28, 0.32, 0.359999, 0.4, 0.39949, 0.366147, 0.343546, 0.330439, 0.314727, 0.29639, 0.278892, 0.261774, 0.243789, 0.229352, 0.224453, 0.226177, 0.227476, 0.226932, 0.226431, 0.226441, 0.226445, 0.226316, 0.226269, 0.226729, 0.228279, 0.2308, 0.23345, 0.235854, 0.238216, 0.240646, 0.243071, 0.245475, 0.247946, 0.250577, 0.253458, 0.256594, 0.259806, 0.262965, 0.2661, 0.269248, 0.272406, 0.275564, 0.278709, 0.281829, 0.28492, 0.287984, 0.291039, 0.2941, 0.297158, 0.300202, 0.303267, 0.306384, 0.309427, 0.312226, 0.314786, 0.317195, 0.319538, 0.321892, 0.324258, 0.326592, 0.328943, 0.33141, 0.333816, 0.335768, 0.337216, 0.338443, 0.339629, 0.340822, 0.342023, 0.343182, 0.344335, 0.345644, 0.346989, 0.347774, 0.347747, 0.347394, 0.347102, 0.346857, 0.346598, 0.346289, 0.345947, 0.345749, 0.345708, 0.345182, 0.343657, 0.341699, 0.339923, 0.338252, 0.336534, 0.334763, 0.332994, 0.331356, 0.32973, 0.327587, 0.324779, 0.321726, 0.318673, 0.315625, 0.312572, 0.3095, 0.306446, 0.303459, 0.300394, 0.297011, 0.293304, 0.289385, 0.285378, 0.281394, 0.277428, 0.273452, 0.269481, 0.265523, 0.261523, 0.257419, 0.253159, 0.248744, 0.244292, 0.239873, 0.235461, 0.231041, 0.226619, 0.222199, 0.21778, 0.213361, 0.208946, 0.204533, 0.200121, 0.195708, 0.191291, 0.186879, 0.18248, 0.178058, 0.173592, 0.169229, 0.165098, 0.16107, 0.156999, 0.152903, 0.148818, 0.144745, 0.140672, 0.136569, 0.132463, 0.128476, 0.12463, 0.120802, 0.116986, 0.113304, 0.109541, 0.105268, 0.101438, 0.0995084, 0.0953922, 0.0824962, 0.0611111, 0.0346168, 0.00453482, -0.0272301, -0.0531119, -0.0659311, -0.0671782, -0.060511, -0.0495874, -0.0380655, -0.0304781, -0.0277283, -0.0161606, -0.0158703, -0.0182155, -0.0192237, -0.0197291, -0.0224647, -0.0236994, -0.0268114, -0.0331048, -0.0337455, -0.0384099, -0.0386892, -0.0400551, -0.0411134, -0.0418757, -0.039125, -0.0217998, 4.87891e-19, -0.00426682, -0.0231687, -0.0372827, -0.0471643, -0.0582054, -0.0704192, -0.0822655, -0.0939326, -0.105968, -0.116514, -0.123037, -0.126767, -0.130676, -0.135362, -0.140032, -0.144485, -0.148936, -0.153446, -0.157945, -0.162356, -0.166596, -0.17069, -0.174764, -0.178876, -0.182993, -0.1871, -0.19121, -0.195324, -0.199418, -0.203464, -0.207436, -0.211332, -0.215206, -0.219096, -0.22299, -0.226876, -0.230774, -0.234685, -0.238553, -0.242319, -0.245973, -0.249526, -0.253035, -0.256561, -0.260094, -0.263614, -0.267147, -0.27072, -0.274237, -0.277569, -0.280719, -0.283753, -0.286737, -0.289728, -0.292729, -0.295711, -0.298702, -0.301762, -0.304787, -0.30754, -0.309993, -0.312313, -0.31461, -0.31691, -0.319215, -0.321495, -0.323773, -0.32614, -0.328528, -0.330592, -0.332186, -0.33359, -0.335029, -0.336498, -0.33796, -0.339385, -0.340784, -0.342294, -0.343927, -0.345182, -0.345653, -0.345747, -0.345962, -0.34629, -0.346594, -0.346857, -0.347104, -0.347394, -0.347747, -0.347774, -0.346989, -0.345644, -0.344335, -0.343182, -0.342023, -0.340822, -0.339629, -0.338443, -0.337216, -0.335768, -0.333816, -0.33141, -0.328943, -0.326592, -0.324258, -0.321892, -0.319538, -0.317195, -0.314786, -0.312226, -0.309427, -0.306384, -0.303267, -0.300202, -0.297158, -0.2941, -0.291039, -0.287984, -0.28492, -0.281829, -0.278709, -0.275564, -0.272406, -0.269248, -0.2661, -0.262965, -0.259806, -0.256594, -0.253458, -0.250577, -0.247946, -0.245475, -0.243071, -0.240646, -0.238216, -0.235853, -0.23345, -0.230801, -0.228281, -0.226725, -0.226262, -0.226329, -0.226472, -0.2264, -0.226328, -0.227065, -0.227867, -0.225759, -0.222979, -0.230661, -0.253422, -0.281846, -0.308929, -0.336429, -0.365121, -0.390301, -0.411952, -0.446401, -0.495347, -0.5, -0.449999, -0.4, -0.35, -0.3, -0.25, -0.2, -0.15, -0.1, -0.05, 3.46945e-18]

    cm_re5E5 = [-1.73472e-18, 0.04, 0.08, 0.12, 0.16, 0.2, 0.24, 0.28, 0.319996, 0.359935, 0.398389, 0.420499, 0.441136, 0.461711, 0.482281, 0.502852, 0.523422, 0.543993, 0.564567, 0.585133, 0.595141, 0.590063, 0.573835, 0.555129, 0.538613, 0.522249, 0.505426, 0.489094, 0.472195, 0.453705, 0.439119, 0.433, 0.429934, 0.425445, 0.420601, 0.416162, 0.411796, 0.407282, 0.402598, 0.398264, 0.394949, 0.392939, 0.392113, 0.391585, 0.390819, 0.390007, 0.389262, 0.388562, 0.387787, 0.386867, 0.386293, 0.386499, 0.386994, 0.387349, 0.387668, 0.388025, 0.388384, 0.388735, 0.389095, 0.389443, 0.389746, 0.389994, 0.390194, 0.390378, 0.390573, 0.390778, 0.390976, 0.391135, 0.391343, 0.391681, 0.391738, 0.391122, 0.390247, 0.389499, 0.388794, 0.388051, 0.387285, 0.386545, 0.385876, 0.385092, 0.383922, 0.38229, 0.380262, 0.378122, 0.376058, 0.374009, 0.37194, 0.369874, 0.367809, 0.365727, 0.363675, 0.361699, 0.359753, 0.35779, 0.355828, 0.353869, 0.351891, 0.349927, 0.348035, 0.346038, 0.34366, 0.340842, 0.337656, 0.334359, 0.33113, 0.327925, 0.324699, 0.32144, 0.318218, 0.315105, 0.31177, 0.30786, 0.30371, 0.299671, 0.295675, 0.291645, 0.287606, 0.283578, 0.279569, 0.275533, 0.271403, 0.267165, 0.26284, 0.258489, 0.254153, 0.249821, 0.245485, 0.241147, 0.236812, 0.232482, 0.228141, 0.22377, 0.219387, 0.215009, 0.210634, 0.206258, 0.201875, 0.197496, 0.193145, 0.18876, 0.184236, 0.179561, 0.174769, 0.169932, 0.165113, 0.16033, 0.155535, 0.150611, 0.145798, 0.141439, 0.136106, 0.128069, 0.118771, 0.10997, 0.101415, 0.0927114, 0.0838695, 0.0751216, 0.0668016, 0.0579848, 0.0469548, 0.0325685, 0.0160804, -0.000407671, -0.0168958, -0.0333839, -0.0438233, -0.0453842, -0.0409097, -0.0332429, -0.0260745, -0.0236179, -0.02154, -0.0204999, -0.0225656, -0.0292425, -0.0310045, -0.0339394, -0.0367941, -0.0393168, -0.0419707, -0.0446739, -0.0471477, -0.0492277, -0.0512713, -0.0527747, -0.0533284, -0.0526812, -0.0397054, -0.0306905, -0.0274788, -0.0246275, -0.0219109, -0.0195295, -0.0178726, -0.0178988, -0.0181141, -0.0201363, -0.0239134, -0.0308128, -0.0473474, -0.0652579, -0.07706, -0.0871855, -0.098767, -0.110597, -0.12201, -0.133189, -0.144811, -0.157225, -0.167595, -0.173606, -0.178047, -0.183219, -0.188571, -0.193716, -0.198832, -0.204016, -0.209257, -0.214373, -0.219133, -0.223438, -0.227329, -0.231116, -0.234986, -0.238873, -0.242735, -0.246579, -0.250453, -0.254389, -0.258179, -0.261644, -0.264987, -0.268389, -0.271808, -0.275209, -0.278605, -0.282009, -0.285432, -0.288822, -0.292101, -0.295246, -0.298272, -0.301265, -0.304282, -0.307308, -0.310325, -0.313319, -0.316343, -0.319445, -0.322378, -0.324909, -0.327284, -0.329736, -0.332213, -0.334668, -0.337109, -0.339565, -0.342063, -0.344493, -0.346696, -0.348626, -0.350321, -0.351952, -0.353627, -0.355308, -0.356978, -0.358665, -0.360336, -0.361949, -0.363675, -0.365688, -0.367814, -0.369883, -0.371937, -0.374007, -0.376059, -0.378122, -0.380261, -0.38229, -0.383922, -0.385092, -0.385876, -0.386545, -0.387285, -0.388051, -0.388794, -0.389499, -0.390247, -0.391122, -0.391738, -0.391681, -0.391343, -0.391135, -0.390976, -0.390778, -0.390573, -0.390378, -0.390194, -0.389994, -0.389746, -0.389443, -0.389095, -0.388735, -0.388384, -0.388025, -0.387668, -0.387349, -0.386994, -0.386499, -0.386293, -0.386867, -0.387787, -0.388562, -0.389262, -0.390007, -0.390819, -0.391585, -0.392113, -0.392939, -0.394949, -0.398264, -0.402598, -0.407282, -0.411796, -0.416162, -0.420601, -0.425444, -0.429933, -0.433, -0.439119, -0.453702, -0.472196, -0.489105, -0.505413, -0.522208, -0.538693, -0.555255, -0.573418, -0.589777, -0.597975, -0.595133, -0.584566, -0.573993, -0.563422, -0.552852, -0.542281, -0.53171, -0.521131, -0.510426, -0.496731, -0.449869, -0.399991, -0.349999, -0.3, -0.25, -0.2, -0.15, -0.1, -0.05, 5.20417e-18]

    cm_re1E6 = [0.0, 0.04, 0.08, 0.12, 0.16, 0.2, 0.24, 0.28, 0.319996, 0.359952, 0.398993, 0.428455, 0.457003, 0.48551, 0.514013, 0.542517, 0.57102, 0.599523, 0.628023, 0.656508, 0.685033, 0.673996, 0.640983, 0.619466, 0.601085, 0.579528, 0.557934, 0.536921, 0.515225, 0.494602, 0.477806, 0.466455, 0.460103, 0.454693, 0.448244, 0.441709, 0.435469, 0.429345, 0.422841, 0.415968, 0.41085, 0.408513, 0.407053, 0.405397, 0.403735, 0.402128, 0.400518, 0.398884, 0.397241, 0.39567, 0.39439, 0.393813, 0.393838, 0.393862, 0.393759, 0.393679, 0.393624, 0.393561, 0.393488, 0.393417, 0.393376, 0.393369, 0.393376, 0.393387, 0.393396, 0.393406, 0.393418, 0.393421, 0.393425, 0.393462, 0.393349, 0.39276, 0.391872, 0.391048, 0.390284, 0.389498, 0.388682, 0.387878, 0.387163, 0.386366, 0.385138, 0.383443, 0.381423, 0.379297, 0.377222, 0.375163, 0.37309, 0.371012, 0.368942, 0.366884, 0.3648, 0.362649, 0.360471, 0.358307, 0.356149, 0.353987, 0.351811, 0.34965, 0.347538, 0.345326, 0.342808, 0.33985, 0.336486, 0.333045, 0.329689, 0.326342, 0.322969, 0.319576, 0.316235, 0.312951, 0.309407, 0.305451, 0.301365, 0.297308, 0.293253, 0.289189, 0.285125, 0.281065, 0.277006, 0.272937, 0.26883, 0.264627, 0.260343, 0.25606, 0.251793, 0.247524, 0.243251, 0.238979, 0.234708, 0.230436, 0.226166, 0.221899, 0.217632, 0.213366, 0.209099, 0.204833, 0.200569, 0.196298, 0.192027, 0.187782, 0.183421, 0.178697, 0.17374, 0.168828, 0.163977, 0.159117, 0.154166, 0.149236, 0.144666, 0.139771, 0.133138, 0.124634, 0.114826, 0.104577, 0.0945284, 0.0846097, 0.0746145, 0.0643389, 0.0543516, 0.045355, 0.034458, 0.0208634, 0.00726881, -0.00632578, -0.0199204, -0.033515, -0.037818, -0.0325526, -0.0255341, -0.0223279, -0.0210895, -0.0188183, -0.0178605, -0.0182186, -0.0223099, -0.0295553, -0.0321853, -0.0349487, -0.0377451, -0.0404905, -0.0431673, -0.0458499, -0.0484486, -0.0508638, -0.0527459, -0.0543582, -0.0557457, -0.0494517, -0.0430175, -0.0367772, -0.0326887, -0.0308393, -0.029174, -0.0271752, -0.0249823, -0.0234831, -0.0230162, -0.0229448, -0.024175, -0.0271544, -9.97466e-18, -0.00788759, -0.0347609, -0.0517026, -0.0659321, -0.082906, -0.099929, -0.116432, -0.133463, -0.149693, -0.163004, -0.172163, -0.177515, -0.182154, -0.187582, -0.193057, -0.198329, -0.203576, -0.208973, -0.214488, -0.219404, -0.223381, -0.22706, -0.230805, -0.234552, -0.238281, -0.242011, -0.245748, -0.249488, -0.253207, -0.256847, -0.260292, -0.263571, -0.26685, -0.270165, -0.273475, -0.276773, -0.280071, -0.283392, -0.286712, -0.289925, -0.293011, -0.296044, -0.299065, -0.302088, -0.305114, -0.30814, -0.31116, -0.314181, -0.317221, -0.320179, -0.322874, -0.325405, -0.327972, -0.330572, -0.33316, -0.335731, -0.338308, -0.340936, -0.343518, -0.345859, -0.347942, -0.349843, -0.351686, -0.353558, -0.355437, -0.357308, -0.359186, -0.361059, -0.362901, -0.3648, -0.366846, -0.368948, -0.37102, -0.373088, -0.375162, -0.377222, -0.379297, -0.381423, -0.383443, -0.385138, -0.386366, -0.387163, -0.387878, -0.388682, -0.389498, -0.390284, -0.391048, -0.391872, -0.39276, -0.393349, -0.393462, -0.393425, -0.393421, -0.393418, -0.393406, -0.393396, -0.393387, -0.393376, -0.393369, -0.393376, -0.393417, -0.393488, -0.393561, -0.393624, -0.393679, -0.393759, -0.393862, -0.393838, -0.393813, -0.39439, -0.39567, -0.397241, -0.398884, -0.400518, -0.402128, -0.403735, -0.405397, -0.407053, -0.408513, -0.41085, -0.415968, -0.422841, -0.429345, -0.435469, -0.441709, -0.448244, -0.454693, -0.460103, -0.466455, -0.477809, -0.494603, -0.515213, -0.536929, -0.55798, -0.579456, -0.600938, -0.619886, -0.64133, -0.671956, -0.685033, -0.666512, -0.648024, -0.629523, -0.61102, -0.592517, -0.574013, -0.555509, -0.536997, -0.518372, -0.497242, -0.449869, -0.39999, -0.349999, -0.3, -0.25, -0.2, -0.15, -0.1, -0.05, 5.20417e-18]


    extrap_cm_old = (cm_re2E5,cm_re5E5,cm_re1E6)
    ND_corr3Dextr_maxerror_cm = 0.0

    #Plot the output and get the error
    extrap_cm =zeros(length(extrap_aoas),length(Re_airfoiltools))
    PyPlot.figure("Verify_cm")
    for i = 1:length(Re_airfoiltools) #length of the airfoiltools data
        for j = 1:length(extrap_aoas)
            vars = (extrap_aoas[j],Re_airfoiltools[i],0.0)
            extrap_cm[j,i] = AirfoilPrep.interpND(splout_extrap[3],vars)

        end
        PyPlot.plot(extrap_aoas,extrap_cm[:,i],label = "Re: $(Re_airfoiltools[i])")
        ND_corr3Dextr_maxerror_cm = max(ND_corr3Dextr_maxerror_cm,maximum(abs.(extrap_cm[:,i]-extrap_cm_old[i])))
    end
    PyPlot.xlabel("aoa (deg)")
    PyPlot.ylabel("cm")

    return ND_corr3Dextr_maxerror_cl,ND_corr3Dextr_maxerror_cd,ND_corr3Dextr_maxerror_cm
end

#------- RUN TESTS ------#

ERROR_TOL = 1E-4

correction3D_error_max = verify_correction3D_2()

NDSpl_maxerror_cl,NDtable = validateNDtools_from_Xfoil()
ND_corr3Dextr_maxerror_cl,ND_corr3Dextr_maxerror_cd,ND_corr3Dextr_maxerror_cm = verifyNDtable_extrap(NDtable)

@test correction3D_error_max <= ERROR_TOL
@test NDSpl_maxerror_cl <= ERROR_TOL
@test ND_corr3Dextr_maxerror_cl <= ERROR_TOLc
@test ND_corr3Dextr_maxerror_cd <= ERROR_TOL
@test ND_corr3Dextr_maxerror_cm <= ERROR_TOL
